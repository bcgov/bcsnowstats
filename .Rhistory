}
dim(ratio_all_unfold)[1] > 0 & !(all(is.na(ratio_all_unfold)))
# Unfold the estimated data from the adjacent stations
estimated_unmelted <- ratio_all_unfold %>%
dplyr::filter(!is.na(estimated_swe)) %>%
unique() %>%
tidyr::spread(id, estimated_swe)
estimated_unmelted <- ratio_all_unfold %>%
dplyr::filter(!is.na(estimated_swe)) %>%
unique()
View(estimated_unmelted)
stations_adj
data_station_oi = data_soi_m
station = "3A28P"
station
# Get the data for an adjacent station using the ad_data function. Will return a dataframe containing daily mean SWE, as well as a timeseries of daily mean SWE values for each julian day filled via linear interpolation and smoothed by 7-day centered rolling mean
ad_data_all <- ad_data(station, normal_max, normal_min, data_id)
ad_data_m <- do.call(rbind, ad_data_all[2])
View(ad_data_m)
all(is.na(ad_data_m))
# If there is no data, assign the data
if (all(is.na(ad_data_m))) {
# Empty dataframe
est_swe <- NA
} else {
#OLD METHOD - ----------------------------------- before you took the mean day
# Calculate the max yearly SWE for the site you are looking at
# meanmax_yearall <-  max(ad_data_m$mean_swe_day_7_fill_soi, na.rm = TRUE)
# Have a test to reject data that looks like an outlier? There are some instances where the whole year is 0 that looks suspect
# Filter years with the outlier data and calculate the mean max yearly SWE
#if (length(boxplot(meanmax_yearall_ad$max_ad, plot=FALSE)$out) > 0) {
# meanmax_year_ad <- meanmax_yearall_ad %>%
#   dplyr::filter(!(max_ad %in% boxplot(meanmax_yearall_ad$max_ad, plot=FALSE)$out)) %>% # filter the outlier years
#   dplyr::ungroup() %>%
#   dplyr::summarize(mean_max = mean(max_ad, na.rm = TRUE))
#} else {
#  meanmax_year_ad <- meanmax_yearall_ad %>%
#    dplyr::ungroup() %>%
#    dplyr::summarize(mean_max = mean(max_ad, na.rm = TRUE))
#}
# Calculate the mean max yearly SWE for the site you are looking at - station of interest
#meanmax_yearall <- data_station_oi %>%
#  dplyr::ungroup() %>%
#  dplyr::group_by(wr) %>%
#  dplyr::filter(!is.na(values_stats)) %>%
#  dplyr::summarise(max_ad = max(values_stats, na.rm = TRUE), .groups = "keep")
# filter for outlier years within your station data prior to calculating
# if (length(boxplot(meanmax_yearall$max_ad, plot=FALSE)$out) > 0) {
#  meanmax_year <- meanmax_yearall %>%
#    dplyr::filter(!(max_ad %in% (boxplot(meanmax_yearall$max_ad, plot=FALSE)$out))) %>% # filter the outlier years
#    dplyr::ungroup() %>%
#    dplyr::summarize(mean_max = mean(max_ad, na.rm = TRUE))
#} else {
#  meanmax_year <- meanmax_yearall %>%
#    dplyr::ungroup() %>%
#    dplyr::summarize(mean_max = mean(max_ad, na.rm = TRUE))
#}
# Calculate the ratio between the two - station of interest / station you are using to fill in data
# ratio <- data.frame(ratio = ifelse(!is.na(meanmax_year_ad$mean_max),
#                  meanmax_year$mean_max / meanmax_year_ad$mean_max, # store with Id of the station you are using to fill in data
#                  NA)) %>%
#    dplyr::mutate(adj_station_id = unique(ad_st$station_id))
#  colname_es <- paste0("estswe_", station)
# Calculate the ratio * SWE for this station
#  est_SWE <- ad_data %>%
#    dplyr::mutate(ratio = ratio$ratio) %>%
#    dplyr::mutate(estimated_swe = values_stats_ad*ratio) %>%
#    dplyr::select(station_id, date_utc, estimated_swe)
#  -----------------------------------
# NEW METHOD - calculate the ratio between the two by each dat
ratio <- dplyr::full_join(data_station_oi, ad_data_m) %>%
dplyr::mutate(ratio = mean_swe_day_7_fill / mean_swe_7_fill_ad) %>%
dplyr::select(m_d, ratio)
# Calculate the estimated SWE using the raw data from the station of interest
col_name <- paste0(station, "_estimatedSWE")
est_swe <- dplyr::full_join(do.call(rbind, ad_data_all[1]), ratio) %>%
dplyr::mutate(estimated_swe = values_stats_ad * ratio) %>%
dplyr::ungroup() %>%
dplyr::select(date_utc, estimated_swe) %>%
dplyr::mutate(date_utc = as.Date(date_utc)) %>%
dplyr::mutate(estimated_swe = as.numeric(estimated_swe)) %>%
dplyr::mutate(id = unique(station))
}
View(est_swe)
ratio <- dplyr::full_join(data_station_oi, ad_data_m)
View(ratio)
ratio <- dplyr::full_join(data_station_oi, ad_data_m) %>%
dplyr::mutate(ratio = mean_swe_day_7_fill / mean_swe_7_fill_ad) %>%
dplyr::select(m_d, ratio)
col_name <- paste0(station, "_estimatedSWE")
ad_data_all[1])
est_swe <- dplyr::full_join(do.call(rbind, ad_data_all[1]), ratio)
View(est_swe)
do.call(rbind, ad_data_all[1])
View(ad_data_all)
station
normal_max
# Retrieve data for the adjacent station
ad_st <- bcsnowdata::get_aswe_databc(station_id = station,
get_year = "All",
parameter = "swe",
timestep = "daily"
)
View(ad_st)
station
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
normals_all <- SWE_normals(data = ASWE_sites_active[26],
normal_max = 2020,
normal_min = 1991,
force = TRUE)
View(normals_all)
normals_all <- SWE_normals(data = ASWE_sites_active[27:30],
normal_max = 2020,
normal_min = 1991,
force = TRUE)
normals_all <- SWE_normals(data = ASWE_sites_active[31:40],
normal_max = 2020,
normal_min = 1991,
force = TRUE)
normals_all <- SWE_normals(data = ASWE_sites_active[41:50],
normal_max = 2020,
normal_min = 1991,
force = TRUE)
normals_all <- SWE_normals(data = ASWE_sites_active,
normal_max = 2020,
normal_min = 1991,
force = TRUE)
bcsnowdata::snow_auto_location()$LOCATION_ID
tims_start2 <- Sys.time()
plot_test <- plot_interactive_aswe(id = bcsnowdata::snow_auto_location()$LOCATION_ID,
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/"))
time_save <- tims_start2 - Sys.time()
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
tims_start2 <- Sys.time()
plot_test <- plot_interactive_aswe(id = bcsnowdata::snow_auto_location()$LOCATION_ID,
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/"))
time_save <- tims_start2 - Sys.time()
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
lapply(snow_basins(),
plot_interactive_basin,
exceptions = NA,
path_basin = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Basinaveraged_plots/"),
save = TRUE)
install.packages("plotly")
library(bcsnowstats)
library(bcsnowstats)
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
id_test = bcsnowdata::snow_auto_location()$LOCATION_ID[10]
tims_start <- Sys.time()
test <- get_snow_stats(station_id = ASWE_sites$LOCATION_ID,
survey_period = "All",
get_year = "2022",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
time_1 <- tims_start - Sys.time()
id_man
id_man <- c("4E01", "4E02",  "4E02A", "4E02B", "4E03")
time_start = Sys.time()
stats_man_west <- bcsnowstats::stats_MSWE(station_id = id_man,
survey_period = "01-Mar",
get_year = "2021",
normal_min = 1991,
normal_max = 2020)
id_man
stats_man_west <- bcsnowstats::stats_MSWE(station_id = id_man,
survey_period = "01-May",
get_year = "2022",
normal_min = 1991,
normal_max = 2020)
bcsnowdata::snow_manual_location()$LOCATION_ID
stats_man_west <- bcsnowstats::stats_MSWE(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID,
survey_period = "01-May",
get_year = "2022",
normal_min = 1991,
normal_max = 2020)
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
active_m <- bcsnowdata::snow_manual_location() %>%
dplyr::filter(STATUS == "Active")
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = active_m$LOCATION_ID,
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
View(test)
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
active_m <- bcsnowdata::snow_manual_location() %>%
dplyr::filter(STATUS == "Active")
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = active_m$LOCATION_ID,
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = active_m$LOCATION_ID,
survey_period = "05-01",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
View(test)
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = active_m$LOCATION_ID,
survey_period = "05-01",
get_year = "2022",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
View(test)
library(bcsnowstats)
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
active_m <- bcsnowdata::snow_manual_location() %>%
dplyr::filter(STATUS == "Active")
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = active_m$LOCATION_ID,
survey_period = "05-01",
get_year = "2022",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID,
survey_period = "05-01",
get_year = "2022",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
manual_sites
test <- bcsnowstats::get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID,
survey_period = "05-01",
get_year = "2022",
normal_min = 1991,
normal_max = 2020, force = FALSE)
test <- bcsnowstats::get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID,
survey_period = "01-May",
get_year = "2022",
normal_min = 1991,
normal_max = 2020, force = FALSE)
manual_sites <-  c("3B01",  "3B02",  "3B02A", "3B03",  "3B04",  "3B05",  "3B06",  "3B07",
"3B08",  "3B09",  "3B10",  "3B11",  "3B12",  "3B13",  "3B14",  "3B15",
"3B16",  "3B17",  "3B18",  "3B19",  "3B20",  "3B21",  "3B22",  "3B24")
bcsnowstats::get_snow_stats(station_id = manual_sites[1:2],
survey_period = time_period,
get_year = get_year,
normal_min = normal_min,
normal_max = normal_max, force = FALSE)
bcsnowstats::get_snow_stats(station_id = manual_sites[1:2],
survey_period = "01-May",
get_year = "2022",
normal_min = 1991,
normal_max = 2020, force = FALSE)
station_id = manual_sites[1:2]
survey_period = "01-May"
get_year = "2022"
normal_min = 1991
normal_max = 2020
force = FALSE
aswe <- bcsnowdata::snow_auto_location()$LOCATION_ID
man <- bcsnowdata::snow_manual_location()$LOCATION_ID
if (any(station_id %in% c("aswe", "ASWE", "Aswe"))) {
id_aswe <- aswe
} else if (any(station_id %in% c("manual", "MANUAL", "Manual", "man"))) {
id_manual <- man
} else if (any(station_id %in% c("ALL", "all", "All"))) {
id_aswe <- aswe
id_manual <- man
} else {
# Check to see whether the station is a manual or automated station
id_aswe <- station_id[station_id %in% aswe]
id_manual <- station_id[station_id %in% man]
}
if (length(id_aswe) > 0) {
df_aswe <- stats_aswe(station_id = id_aswe,
survey_period = survey_period,
get_year = get_year,
normal_min = normal_min,
normal_max = normal_max,
force = force)
}
length(id_manual) > 0
station_id = id_manual
# Retrieve data for the stations. Don't use caching
manual_snow <- bcsnowdata::get_manual_swe(station_id = station_id,
survey_period = "All",
get_year = "All")
# If the input is All, get the list of stations from the data you just retrieved
if (station_id[1] == "All") {
stations <- unique(manual_snow$id)
} else {
stations <- unique(station_id)
}
# convert the survey_period into the right format (in case the input format is incorrect)
if (survey_period == "01-01") {
survey_period <- "01-Jan"
} else if (survey_period == "02-01") {
survey_period <-  "01-Feb"
} else if (survey_period == "03-01") {
survey_period <-  "01-Mar"
} else if (survey_period == "04-01") {
survey_period <-  "01-Apr"
} else if (survey_period == "05-01") {
survey_period <-  "01-May"
} else if (survey_period == "05-15") {
survey_period <-  "15-May"
} else if (survey_period == "06-01") {
survey_period <-  "01-Jun"
} else if (survey_period == "06-15") {
survey_period <-  "15-Jun"
} else if (survey_period == "latest") {
survey_period <- "latest"
} else {
survey_period <- survey_period
}
# Replace any missing/incorrect data; manually correct any sites that have incorrect SWE data
if (any(!is.na(incorrect_sites))) {
for (f in 1:length(incorrect_sites)) {
manual_snow$swe_mm[manual_snow$id %in% incorrect_sites[f] & manual_snow$survey_period %in% survey_period & lubridate::year(as.Date(manual_snow$date_utc)) %in% get_year] <- incorrect_data[f]
}
}
incorrect_sites = NA
incorrect_data = NA
force = FALSE
# Retrieve data for the stations. Don't use caching
manual_snow <- bcsnowdata::get_manual_swe(station_id = station_id,
survey_period = "All",
get_year = "All")
# If the input is All, get the list of stations from the data you just retrieved
if (station_id[1] == "All") {
stations <- unique(manual_snow$id)
} else {
stations <- unique(station_id)
}
# convert the survey_period into the right format (in case the input format is incorrect)
if (survey_period == "01-01") {
survey_period <- "01-Jan"
} else if (survey_period == "02-01") {
survey_period <-  "01-Feb"
} else if (survey_period == "03-01") {
survey_period <-  "01-Mar"
} else if (survey_period == "04-01") {
survey_period <-  "01-Apr"
} else if (survey_period == "05-01") {
survey_period <-  "01-May"
} else if (survey_period == "05-15") {
survey_period <-  "15-May"
} else if (survey_period == "06-01") {
survey_period <-  "01-Jun"
} else if (survey_period == "06-15") {
survey_period <-  "15-Jun"
} else if (survey_period == "latest") {
survey_period <- "latest"
} else {
survey_period <- survey_period
}
# Replace any missing/incorrect data; manually correct any sites that have incorrect SWE data
if (any(!is.na(incorrect_sites))) {
for (f in 1:length(incorrect_sites)) {
manual_snow$swe_mm[manual_snow$id %in% incorrect_sites[f] & manual_snow$survey_period %in% survey_period & lubridate::year(as.Date(manual_snow$date_utc)) %in% get_year] <- incorrect_data[f]
}
}
# use get_percentile function to calculate statistics for the dates and stations specified
df_final_1 <- manual_get_stats(stations = stations,
data = manual_snow,
survey_period = survey_period,
get_year = get_year,
normal_min, normal_max, force)
df_final_1 <- manual_get_stats(stations = stations,
data = manual_snow,
survey_period = survey_period,
get_year = get_year,
normal_min = normal_min, normal_max = normal_max, force = force)
data = manual_snow
data$wr <- bcsnowdata::wtr_yr(dates = data$date_utc)
df_tmp_1 <- data %>%
dplyr::group_by(id, survey_period) %>%
dplyr::filter(!is.na(swe_mm)) # filter out missing data
# Calculate statistics and normals through function for each survey period
df_stat <- snow_stats_manual(data = df_tmp_1, normal_min, normal_max, force)
if (dim(df_stat)[1] > 1) {
# join statistics table with the entire record and calculate percentile for each day
df_tmp_2 <- dplyr::full_join(df_tmp_1, df_stat, by = c("id", "survey_period"))
#Select the user defined time interval
if (survey_period == "latest") {
#Select the last day there is data for
latest_stats <- df_tmp_2[which(df_tmp_2$date_utc == max(df_tmp_2$date_utc)), ] #select the most recent day of data
# Calculate the percentile for today
} else if (survey_period == "All") {
# return all data with stats
latest_stats <- df_tmp_2
# is it worth it to calculate the percentiles for the large dataset?!
} else {
sp <- survey_period
# Select the day and time from the entire data
latest_stats <- df_tmp_2 %>%
dplyr::filter(survey_period %in% as.character(tidyselect::all_of(sp)))
# Calculate the percentile for the survey period you have defined
}
# Subset by years selected
if (get_year == "All") {
latest_stats_1 <- latest_stats
} else {
latest_stats$wr <- bcsnowdata::wtr_yr(latest_stats$date_utc)
latest_stats_1 <- latest_stats %>%
dplyr::filter(wr %in% get_year) %>%
dplyr::select(-wr)
}
# Calculate the stats for the day if there is data for today's survey period
if (dim(latest_stats_1)[1] > 0) {
latest_stats_day <- latest_stats_1 %>%
#dplyr::mutate(Data_Range = print(paste0(as.Date(min(Date_UTC)), ' to ', as.Date(max(Date_UTC))))) %>%
dplyr::mutate(percent_Q50 = round((swe_mm / Q50 * 100), digits = 2)) %>%
dplyr::mutate(percent_mean = round((swe_mm / swe_mean * 100), digits = 2)) %>%
dplyr::mutate(percent_normal_mean = ifelse("normal_swe_mean" %in% colnames(latest_stats_1),
round((swe_mm / normal_swe_mean * 100), digits = 2),
NA)) %>%
dplyr::mutate(percent_normal_median = ifelse("normal_Q50" %in% colnames(latest_stats_1),
round((swe_mm / normal_Q50 * 100), digits = 2),
NA)) %>%
dplyr::arrange(date_utc)
# Calculate the percentile by day - historic SWE in the dataframe
latest_stats_2 <- latest_stats_day %>%
dplyr::group_by(id, survey_period) %>%
dplyr::mutate(percentile = ifelse(length(unlist(historic_swe)) > 5,
round(purrr::map2_dbl(historic_swe, swe_mm, ~ecdf(.x$mean_swe)(.y)) * 100, digits = 2),
NaN)) %>%
dplyr::select(-historic_swe) %>%
dplyr::arrange(id, date_utc)
# Calculate the rank - min and max for POR
latest_stats_2$current_rank_min <- mapply(rank_min_function, latest_stats_day$historic_swe, latest_stats_day$swe_mm)
latest_stats_2$current_rank_max <- mapply(rank_max_function, latest_stats_day$historic_swe, latest_stats_day$swe_mm)
} else {
latest_stats_2 <- data.frame() # empty dataframe if no data available
}
} else {
latest_stats_2 <- data.frame() # empty dataframe if no data available
}
dim(latest_stats_2)[1] < 1
if (dim(latest_stats_2)[1] < 1) {
entry <- data.frame(id = as.character(stations), "survey_period" = survey_period)
latest_stats_3 <- dplyr::bind_rows(latest_stats_2, as.data.frame(entry))
} else {
latest_stats_3 <- latest_stats_2 %>%
dplyr::arrange(id)
}
devtools::document()
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
manual_sites <-  c("3B01",  "3B02",  "3B02A", "3B03",  "3B04",  "3B05",  "3B06",  "3B07",
"3B08",  "3B09",  "3B10",  "3B11",  "3B12",  "3B13",  "3B14",  "3B15",
"3B16",  "3B17",  "3B18",  "3B19",  "3B20",  "3B21",  "3B22",  "3B24")
bcsnowstats::get_snow_stats(station_id = manual_sites[1:2],
survey_period = "01-May",
get_year = "2022",
normal_min = 1991,
normal_max = 2020, force = FALSE)
