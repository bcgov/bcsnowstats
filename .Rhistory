dplyr::mutate(first_diff = dailySWE_interp - lag(dailySWE_interp)) %>%
dplyr::filter(!is.na(first_diff))%>%
dplyr::select(Date, year, first_diff) %>%
dplyr::ungroup()
# Section for when the max day is 29 - leap years
data_diff_29 <- select_month %>%
dplyr::group_by(year) %>%
dplyr::filter(max(day) == c("29")) %>%
dplyr::filter(day %in% c("1", "01", "29")) %>%
dplyr::group_by(year) %>%
dplyr::mutate(first_diff = dailySWE_interp - lag(dailySWE_interp)) %>%
dplyr::filter(!is.na(first_diff))%>%
dplyr::select(Date, year, first_diff) %>%
dplyr::ungroup()
# Bind together
data_diff <- rbind(data_diff_28, data_diff_29) %>%
dplyr::arrange(Date)
}
# perform stats
mean <- dplyr::summarise(data_diff, mean = mean(first_diff, na.rm = TRUE))
median <- dplyr::summarise(data_diff, median = median(first_diff, na.rm = TRUE))
min <- dplyr::summarise(data_diff, MIN = min(first_diff, na.rm=TRUE))
Q5 <- dplyr::summarise(data_diff, Q5 = quantile(first_diff, 0.05, na.rm=TRUE))
Q10 <- dplyr::summarise(data_diff, Q10 = quantile(first_diff, 0.1, na.rm=TRUE))
Q25 <- dplyr::summarise(data_diff, Q25 = quantile(first_diff, 0.25, na.rm=TRUE))
Q50 <- dplyr::summarise(data_diff, Q50 = quantile(first_diff, 0.5,na.rm=TRUE))
Q75 <- dplyr::summarise(data_diff, Q75 = quantile(first_diff,0.75, na.rm=TRUE))
Q90 <- dplyr::summarise(data_diff, Q90 = quantile(first_diff,0.90, na.rm=TRUE))
max <- dplyr::summarise(data_diff, MAX = max(first_diff, na.rm=TRUE))
n_years <- length(data_diff$first_diff)
delta_stats <- cbind(unique(select_month$month), mean, median, min, Q5, Q25, Q50, Q75, Q90, max, n_years)
colnames(delta_stats)[1] <- "Month"
df_out <- list()
df_out$statistics <- delta_stats
df_out$monthlydata <- data_diff
} else {
df_out = NULL
}
# Test for interactive plots
# V drive for saving
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
drive_Q
lapply(ASWE_sites_active[6],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
#match("3B24P", ASWE_sites_active)
ASWE_sites_active[6]
test <- plot_monthly_deltaswe(id = ASWE_sites_active[6],
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
id = ASWE_sites_active[6]
save = TRUE
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/")
getmonthly_deltaSWE <- function(id) {
test_1 <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = "All",
parameter = "swe",
timestep = "daily") # one site, all years
# If there is any data for the site, run monthly delta SWE statistics
if (dim(test_1)[1] > 0) {
# Filter out the current water year so you are only using historic
month_deltaSWE <- test_1 %>%
dplyr::mutate(m_y = format(date_utc, "%m-%Y")) %>%
dplyr::mutate(day = format(date_utc, "%d")) %>%
dplyr::mutate(Date = as.Date(date_utc)) %>%
dplyr::mutate(water_year = bcsnowdata::wtr_yr(Date)) %>%
dplyr::filter(water_year < bcsnowdata::wtr_yr(Sys.Date())) %>%
dplyr::group_by(Date)
# Take daily mean SWE
daily_swe <- dplyr::summarise(month_deltaSWE, Mean_dailySWE = mean(value, na.rm = TRUE)) %>%
dplyr::mutate(m_y = format(Date, "%m-%Y")) %>%
dplyr::mutate(day = format(Date, "%d")) %>%
dplyr::mutate(month = format(Date, "%m")) %>%
dplyr::mutate(year = format(Date, "%Y")) %>%
dplyr::filter(!is.na(Mean_dailySWE))
if (dim(daily_swe)[1] > 1) {
# Linear interpolation to fill in missing days of data.
# Create a time series of the snow accomulation months: oct - july
time_start <- min(daily_swe$Date)
time_end <- max(daily_swe$Date)
Date = as.data.frame(seq(as.Date(time_start), as.Date(time_end), by = "day"))
colnames(Date) <- c('Date')
# Bind to the daily SWE and perform linear interpolation of missing data
daily_swe_NA <- dplyr::full_join(daily_swe, Date) %>%
dplyr::arrange(Date) %>%
dplyr::mutate(dailySWE_interp = zoo::na.approx(Mean_dailySWE, na.rm = FALSE))
watermonths <- c(seq(10,12, by = 1), c("01", "02", "03", "04", "05", "06", "07", "08"))
watermonths_data <- watermonths[watermonths %in% unique(daily_swe_NA$month, na.rm = TRUE)]
station_diff <- lapply(watermonths_data,
SWE_diff_month,
data = daily_swe_NA)
df_list <- list()
# unlist to get all of the differences by month
for (i in 1:length(watermonths_data)) {
if (length(station_diff[[i]]$statistics) > 0){
station_diff_unlist <- do.call("cbind.data.frame", station_diff[[i]]$statistics)
station_diff_unlist$Station_ID <- id
df_list[[i]] <- station_diff_unlist
}
}
# Unlist statistics
station_diff_unlist <- do.call("rbind.data.frame", df_list)
# Unlist the data
df_list_data <- list()
# unlist to get all of the differences by month
for (i in 1:length(watermonths_data)) {
if (!is.null(dim(station_diff[[i]]$monthlydata)[1]) && dim(station_diff[[i]]$monthlydata)[1] > 0) {
temp <- do.call("cbind.data.frame", station_diff[[i]]$monthlydata)
temp$Station_ID <- id
df_list_data[[i]] <- temp
}
}
# Unlist statistics
station_data_unlist <- do.call("rbind.data.frame", df_list_data) %>%
dplyr::mutate(Month = lubridate::month(Date))
} else {
print("No data for site")
station_diff_unlist <- NA
station_data_unlist <- NA
}
} else {
print("No data for site")
station_diff_unlist <- NA
station_data_unlist <- NA
}
return(list(station_diff_unlist, station_data_unlist))
}
# get the statistics for the monthly change in SWE. Function returns both data as well as stats (stats = 1, data = 2)
monthly_df <- getmonthly_deltaSWE(id)
monthly_deltaSWE_data <- monthly_df[[2]]
#Get the monthly change in SWE - YTD
YTD_monthly_deltaSWE <- getmonthly_deltaSWE_YTD(id)
if (all(is.na(monthly_deltaSWE_data))) {
print("No data for station")
} else if (all(is.na(YTD_monthly_deltaSWE))) {
print("No data for station")
} else {
# Format so that the months start in Oct
monthly_deltaSWE_data$Month_order <- factor(monthly_deltaSWE_data$Month, levels = unique(monthly_deltaSWE_data$Month))
YTD_monthly_deltaSWE$Month_order <- factor(YTD_monthly_deltaSWE$Month, levels = unique(YTD_monthly_deltaSWE$Month))
years_data <- min(monthly_df[[1]]$n_years)
# plot the boxplot
p <- plotly::plot_ly(data = monthly_deltaSWE_data,
x = ~Month_order,
y = ~first_diff,
type = "box",
name = "Historic Monthly Accumulation") %>%
# Add the monthly accumulation for the YTD
plotly::add_trace(data = YTD_monthly_deltaSWE,
x = ~Month_order,
y = ~first_diff,
type = "scatter",
mode = "markers",
name = "YTD Monthly Accumulation") %>%
plotly::layout(title = paste0('Change in Monthly SWE (mm) for ', id),
xaxis = list(
title = 'Month'),
yaxis = list(title = 'Change in Monthly SWE (mm/month)')) %>%
# Add the number of years within the
plotly::layout(annotations = list(
list(x = 0 , y = 1, text = paste0("Years of data: ", years_data), showarrow = F, xref='paper', yref='paper')))
if (save %in% c("True", "true", "T", "TRUE", TRUE)) {
htmlwidgets::saveWidget(plotly::as_widget(p), paste0(path_save, "MonthlyDeltaSWE_", id, ".html"),
selfcontained = F, # for making the finised product smaller and faster to save
libdir = NULL, # for making the finised product smaller and faster to save
title = paste0("Monthly Delta SWE ", id))
}
return(p)
}
p
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
lapply(ASWE_sites_active,
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
# Test for interactive plots
# V drive for saving
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
lapply(ASWE_sites_active,
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
ASWE_sites_active
lapply(ASWE_sites_active[1:5],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
test <- plot_monthly_deltaswe(id = ASWE_sites_active[1],
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
id = ASWE_sites_active[1]
save = TRUE
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/")
id
# get the statistics for the monthly change in SWE. Function returns both data as well as stats (stats = 1, data = 2)
monthly_df <- getmonthly_deltaSWE(id)
monthly_deltaSWE_data <- monthly_df[[2]]
# get the statistics for the monthly change in SWE. Function returns both data as well as stats (stats = 1, data = 2)
monthly_df <- getmonthly_deltaSWE(id)
id
id
test_1 <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = "All",
parameter = "swe",
timestep = "daily") # one site, all years
# Filter out the current water year so you are only using historic
month_deltaSWE <- test_1 %>%
dplyr::mutate(m_y = format(date_utc, "%m-%Y")) %>%
dplyr::mutate(day = format(date_utc, "%d")) %>%
dplyr::mutate(Date = as.Date(date_utc)) %>%
dplyr::mutate(water_year = bcsnowdata::wtr_yr(Date)) %>%
dplyr::filter(water_year < bcsnowdata::wtr_yr(Sys.Date())) %>%
dplyr::group_by(Date)
# Take daily mean SWE
daily_swe <- dplyr::summarise(month_deltaSWE, Mean_dailySWE = mean(value, na.rm = TRUE)) %>%
dplyr::mutate(m_y = format(Date, "%m-%Y")) %>%
dplyr::mutate(day = format(Date, "%d")) %>%
dplyr::mutate(month = format(Date, "%m")) %>%
dplyr::mutate(year = format(Date, "%Y")) %>%
dplyr::filter(!is.na(Mean_dailySWE))
if (dim(daily_swe)[1] > 1) {
# Linear interpolation to fill in missing days of data.
# Create a time series of the snow accomulation months: oct - july
time_start <- min(daily_swe$Date)
time_end <- max(daily_swe$Date)
Date = as.data.frame(seq(as.Date(time_start), as.Date(time_end), by = "day"))
colnames(Date) <- c('Date')
# Bind to the daily SWE and perform linear interpolation of missing data
daily_swe_NA <- dplyr::full_join(daily_swe, Date) %>%
dplyr::arrange(Date) %>%
dplyr::mutate(dailySWE_interp = zoo::na.approx(Mean_dailySWE, na.rm = FALSE))
watermonths <- c(seq(10,12, by = 1), c("01", "02", "03", "04", "05", "06", "07", "08"))
watermonths_data <- watermonths[watermonths %in% unique(daily_swe_NA$month, na.rm = TRUE)]
station_diff <- lapply(watermonths_data,
SWE_diff_month,
data = daily_swe_NA)
df_list <- list()
# unlist to get all of the differences by month
for (i in 1:length(watermonths_data)) {
if (length(station_diff[[i]]$statistics) > 0){
station_diff_unlist <- do.call("cbind.data.frame", station_diff[[i]]$statistics)
station_diff_unlist$Station_ID <- id
df_list[[i]] <- station_diff_unlist
}
}
# Unlist statistics
station_diff_unlist <- do.call("rbind.data.frame", df_list)
# Unlist the data
df_list_data <- list()
# unlist to get all of the differences by month
for (i in 1:length(watermonths_data)) {
if (!is.null(dim(station_diff[[i]]$monthlydata)[1]) && dim(station_diff[[i]]$monthlydata)[1] > 0) {
temp <- do.call("cbind.data.frame", station_diff[[i]]$monthlydata)
temp$Station_ID <- id
df_list_data[[i]] <- temp
}
}
# Unlist statistics
station_data_unlist <- do.call("rbind.data.frame", df_list_data) %>%
dplyr::mutate(Month = lubridate::month(Date))
} else {
print("No data for site")
station_diff_unlist <- NA
station_data_unlist <- NA
}
getmonthly_deltaSWE <- function(id) {
test_1 <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = "All",
parameter = "swe",
timestep = "daily") # one site, all years
# If there is any data for the site, run monthly delta SWE statistics
if (dim(test_1)[1] > 0) {
# Filter out the current water year so you are only using historic
month_deltaSWE <- test_1 %>%
dplyr::mutate(m_y = format(date_utc, "%m-%Y")) %>%
dplyr::mutate(day = format(date_utc, "%d")) %>%
dplyr::mutate(Date = as.Date(date_utc)) %>%
dplyr::mutate(water_year = bcsnowdata::wtr_yr(Date)) %>%
dplyr::filter(water_year < bcsnowdata::wtr_yr(Sys.Date())) %>%
dplyr::group_by(Date)
# Take daily mean SWE
daily_swe <- dplyr::summarise(month_deltaSWE, Mean_dailySWE = mean(value, na.rm = TRUE)) %>%
dplyr::mutate(m_y = format(Date, "%m-%Y")) %>%
dplyr::mutate(day = format(Date, "%d")) %>%
dplyr::mutate(month = format(Date, "%m")) %>%
dplyr::mutate(year = format(Date, "%Y")) %>%
dplyr::filter(!is.na(Mean_dailySWE))
if (dim(daily_swe)[1] > 1) {
# Linear interpolation to fill in missing days of data.
# Create a time series of the snow accomulation months: oct - july
time_start <- min(daily_swe$Date)
time_end <- max(daily_swe$Date)
Date = as.data.frame(seq(as.Date(time_start), as.Date(time_end), by = "day"))
colnames(Date) <- c('Date')
# Bind to the daily SWE and perform linear interpolation of missing data
daily_swe_NA <- dplyr::full_join(daily_swe, Date) %>%
dplyr::arrange(Date) %>%
dplyr::mutate(dailySWE_interp = zoo::na.approx(Mean_dailySWE, na.rm = FALSE))
watermonths <- c(seq(10,12, by = 1), c("01", "02", "03", "04", "05", "06", "07", "08"))
watermonths_data <- watermonths[watermonths %in% unique(daily_swe_NA$month, na.rm = TRUE)]
station_diff <- lapply(watermonths_data,
SWE_diff_month,
data = daily_swe_NA)
df_list <- list()
# unlist to get all of the differences by month
for (i in 1:length(watermonths_data)) {
if (length(station_diff[[i]]$statistics) > 0){
station_diff_unlist <- do.call("cbind.data.frame", station_diff[[i]]$statistics)
station_diff_unlist$Station_ID <- id
df_list[[i]] <- station_diff_unlist
}
}
# Unlist statistics
station_diff_unlist <- do.call("rbind.data.frame", df_list)
# Unlist the data
df_list_data <- list()
# unlist to get all of the differences by month
for (i in 1:length(watermonths_data)) {
if (!is.null(dim(station_diff[[i]]$monthlydata)[1]) && dim(station_diff[[i]]$monthlydata)[1] > 0) {
temp <- do.call("cbind.data.frame", station_diff[[i]]$monthlydata)
temp$Station_ID <- id
df_list_data[[i]] <- temp
}
}
# Unlist statistics
station_data_unlist <- do.call("rbind.data.frame", df_list_data) %>%
dplyr::mutate(Month = lubridate::month(Date))
} else {
print("No data for site")
station_diff_unlist <- NA
station_data_unlist <- NA
}
} else {
print("No data for site")
station_diff_unlist <- NA
station_data_unlist <- NA
}
return(list(station_diff_unlist, station_data_unlist))
}
# get the statistics for the monthly change in SWE. Function returns both data as well as stats (stats = 1, data = 2)
monthly_df <- getmonthly_deltaSWE(id)
monthly_deltaSWE_data <- monthly_df[[2]]
#Get the monthly change in SWE - YTD
YTD_monthly_deltaSWE <- getmonthly_deltaSWE_YTD(id)
if (all(is.na(monthly_deltaSWE_data))) {
print("No data for station")
} else if (all(is.na(YTD_monthly_deltaSWE))) {
print("No data for station")
} else {
# Format so that the months start in Oct
monthly_deltaSWE_data$Month_order <- factor(monthly_deltaSWE_data$Month, levels = unique(monthly_deltaSWE_data$Month))
YTD_monthly_deltaSWE$Month_order <- factor(YTD_monthly_deltaSWE$Month, levels = unique(YTD_monthly_deltaSWE$Month))
years_data <- min(monthly_df[[1]]$n_years)
# plot the boxplot
p <- plotly::plot_ly(data = monthly_deltaSWE_data,
x = ~Month_order,
y = ~first_diff,
type = "box",
name = "Historic Monthly Accumulation") %>%
# Add the monthly accumulation for the YTD
plotly::add_trace(data = YTD_monthly_deltaSWE,
x = ~Month_order,
y = ~first_diff,
type = "scatter",
mode = "markers",
name = "YTD Monthly Accumulation") %>%
plotly::layout(title = paste0('Change in Monthly SWE (mm) for ', id),
xaxis = list(
title = 'Month'),
yaxis = list(title = 'Change in Monthly SWE (mm/month)')) %>%
# Add the number of years within the
plotly::layout(annotations = list(
list(x = 0 , y = 1, text = paste0("Years of data: ", years_data), showarrow = F, xref='paper', yref='paper')))
if (save %in% c("True", "true", "T", "TRUE", TRUE)) {
htmlwidgets::saveWidget(plotly::as_widget(p), paste0(path_save, "MonthlyDeltaSWE_", id, ".html"),
selfcontained = F, # for making the finised product smaller and faster to save
libdir = NULL, # for making the finised product smaller and faster to save
title = paste0("Monthly Delta SWE ", id))
}
return(p)
}
plot_monthly_deltaswe <- function(id, path_save, save = FALSE) {
# get the statistics for the monthly change in SWE. Function returns both data as well as stats (stats = 1, data = 2)
monthly_df <- getmonthly_deltaSWE(id)
monthly_deltaSWE_data <- monthly_df[[2]]
#Get the monthly change in SWE - YTD
YTD_monthly_deltaSWE <- getmonthly_deltaSWE_YTD(id)
if (all(is.na(monthly_deltaSWE_data))) {
print("No data for station")
} else if (all(is.na(YTD_monthly_deltaSWE))) {
print("No data for station")
} else {
# Format so that the months start in Oct
monthly_deltaSWE_data$Month_order <- factor(monthly_deltaSWE_data$Month, levels = unique(monthly_deltaSWE_data$Month))
YTD_monthly_deltaSWE$Month_order <- factor(YTD_monthly_deltaSWE$Month, levels = unique(YTD_monthly_deltaSWE$Month))
years_data <- min(monthly_df[[1]]$n_years)
# plot the boxplot
p <- plotly::plot_ly(data = monthly_deltaSWE_data,
x = ~Month_order,
y = ~first_diff,
type = "box",
name = "Historic Monthly Accumulation") %>%
# Add the monthly accumulation for the YTD
plotly::add_trace(data = YTD_monthly_deltaSWE,
x = ~Month_order,
y = ~first_diff,
type = "scatter",
mode = "markers",
name = "YTD Monthly Accumulation") %>%
plotly::layout(title = paste0('Change in Monthly SWE (mm) for ', id),
xaxis = list(
title = 'Month'),
yaxis = list(title = 'Change in Monthly SWE (mm/month)')) %>%
# Add the number of years within the
plotly::layout(annotations = list(
list(x = 0 , y = 1, text = paste0("Years of data: ", years_data), showarrow = F, xref='paper', yref='paper')))
if (save %in% c("True", "true", "T", "TRUE", TRUE)) {
htmlwidgets::saveWidget(plotly::as_widget(p), paste0(path_save, "MonthlyDeltaSWE_", id, ".html"),
selfcontained = F, # for making the finised product smaller and faster to save
libdir = NULL, # for making the finised product smaller and faster to save
title = paste0("Monthly Delta SWE ", id))
}
return(p)
}
}
test <- plot_monthly_deltaswe(id = ASWE_sites_active[1],
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
lapply(ASWE_sites_active[1:5],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
lapply(ASWE_sites_active[23],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
# Test for interactive plots
# V drive for saving
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
tims_start2 <- Sys.time()
plot_test <- plot_interactive_aswe(id = ASWE_sites_active[12],
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/"))
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
# Test for interactive plots
# V drive for saving
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
lapply(ASWE_sites_active,
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
#match("1D06P", ASWE_sites_active)
match("2F01AP", ASWE_sites_active)
lapply(ASWE_sites_active[87],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
lapply(ASWE_sites_active[88],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
lapply(ASWE_sites_active[89],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
lapply(ASWE_sites_active[90],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
lapply(ASWE_sites_active[91:length(ASWE_sites_active)],
plot_monthly_deltaswe,
save = TRUE,
path_save = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/MonthlyDeltaSWE_boxplots/"))
