df_normals_20t30 <- data.frame(id = df_normal_time$id)
}
df_normals_20t30
View(df_normals_20t30)
df_normals_10t20
dim(survey_periods_30)[1] >= 1
df_normal_time
if (dim(survey_periods_30)[1] >= 1) {
all_swe_1 <- df_normal_time %>%
dplyr::filter(survey_period %in% survey_periods_30$survey_period) %>%
dplyr::mutate(swe_fornormal = values_stats) %>%
dplyr::mutate(numberofyears_estimated = numberofyears_raw) %>%
dplyr::group_by(survey_period)
# Calculate the normal statistics for each day of the year with manual_normal function
df_normals_20t30 <- manual_normal(data = all_swe_1)
} else {
df_normals_20t30 <- data.frame(id = unique(df_normal_time$id))
}
# Join all together
df_10t30 <- dplyr::full_join(df_normals_20t30, df_normals_10t20) %>%
unique()
df_10t30
# Join all together
df_10t30 <- dplyr::full_join(df_normals_20t30, df_normals_10t20) %>%
unique()
df_all <- dplyr::full_join(df_10t30, df_normals_10) %>%
unique()
View(df_all)
df_normals_10t20
View(df_normals_10t20)
# Fill in data from adjacent stations using manual_datafill() function. Only fill for survey periods between 10-20 years of raw data
all_swe <- manual_datafill(data = dplyr::full_join(df_time, num_obs, by = "survey_period"),
normal_max, normal_min, survey_periods_20, num_obs)
# Group by survey data and filter so you are only calculating normals for stations with at least 20 years of raw+ predicted data
all_swe_1 <- all_swe %>%
dplyr::filter(numberofyears_estimated >= 20) %>%
dplyr::group_by(survey_period)
# Calculate normals
df_normals_filled <- manual_normal(data = all_swe_1)
View(df_normals_filled)
# Append the survey periods that don't have enough data to calculate a normal
survey_l20 <- all_swe %>%
dplyr::ungroup() %>%
dplyr::filter(numberofyears_estimated < 20) %>%
dplyr::select(survey_period, numberofyears_estimated, numberofyears_raw) %>%
unique()
View(survey_l20)
if (dim(survey_periods_20)[1] > 1) {
# Fill in data from adjacent stations using manual_datafill() function. Only fill for survey periods between 10-20 years of raw data
all_swe <- manual_datafill(data = dplyr::full_join(df_time, num_obs, by = "survey_period"),
normal_max, normal_min, survey_periods_20, num_obs)
# Group by survey data and filter so you are only calculating normals for stations with at least 20 years of raw+ predicted data
all_swe_1 <- all_swe %>%
dplyr::filter(numberofyears_estimated >= 20) %>%
dplyr::group_by(survey_period)
# Calculate normals
df_normals_filled <- manual_normal(data = all_swe_1)
# Append the survey periods that don't have enough data to calculate a normal
survey_l20 <- all_swe %>%
dplyr::ungroup() %>%
dplyr::filter(numberofyears_estimated < 20) %>%
dplyr::select(survey_period, numberofyears_estimated, numberofyears_raw, id) %>%
unique()
df_normals_10t20 <- dplyr::full_join(df_normals_filled, survey_l20, by = c("survey_period", "numberofyears_estimated", "numberofyears_raw"))
} else{
df_normals_10t20 <- data.frame(id = df_normal_time$id)
}
#####################################
# What survey periods have < 10 observations? Do not calculate a normal
survey_periods_10 <- num_obs %>%
dplyr::filter(numberofyears_raw < 10) %>%
dplyr::select(survey_period)
if (dim(survey_periods_10)[1] > 1) {
# If all of the survey periods have less than 10 years, do not calculate a normal
df_normals_10 <- df_normal_time %>%
dplyr::ungroup() %>%
dplyr::filter(survey_period %in% survey_periods_10$survey_period) %>%
dplyr::select(survey_period, numberofyears_raw, id) %>%
unique() %>%
dplyr::mutate(numberofyears_estimated = numberofyears_raw,
normal_minimum = NA,
normal_swe_mean = NA,
normal_Q5 = NA,
normal_Q10 = NA,
normal_Q25 = NA,
normal_Q50 = NA,
normal_Q75 = NA,
normal_Q90 = NA,
normal_maximum = NA,
data_range_normal = NA,
date_min_normal_utc = NA,
date_max_normal_utc = NA)
} else {
df_normals_10 <- data.frame(id = unique(df_normal_time$id))
}
#####################################
# If there is 20-30 observations for a particular survey period
survey_periods_30 <- num_obs %>%
dplyr::filter(numberofyears_raw >= 20) %>%
dplyr::select(survey_period)
if (dim(survey_periods_30)[1] >= 1) {
all_swe_1 <- df_normal_time %>%
dplyr::filter(survey_period %in% survey_periods_30$survey_period) %>%
dplyr::mutate(swe_fornormal = values_stats) %>%
dplyr::mutate(numberofyears_estimated = numberofyears_raw) %>%
dplyr::group_by(survey_period)
# Calculate the normal statistics for each day of the year with manual_normal function
df_normals_20t30 <- manual_normal(data = all_swe_1)
} else {
df_normals_20t30 <- data.frame(id = unique(df_normal_time$id))
}
# Join all together
df_10t30 <- dplyr::full_join(df_normals_20t30, df_normals_10t20) %>%
unique()
df_all <- dplyr::full_join(df_10t30, df_normals_10) %>%
unique()
# Check to make sure that data has a wr column
if (!("wr" %in% colnames(data))) {
data$wr <- bcsnowdata::wtr_yr(dates = data$date_utc)
}
# Check to make sure there is a m-d column in the data
if (!("m_d" %in% colnames(data))) {
data <- data %>%
dplyr::mutate(m_d = format.Date(date_utc, "%m-%d"))
}
if ("swe_mean" %in% colnames(data)) {
data_id <- "swe_mean" # reassign the data_ID value
}
# Filter the data by the normal span that you specify
df_time <- data %>%
dplyr::group_by(id, m_d) %>%
dplyr::rename(values_stats = all_of(data_id))
data = data_norm
# Check to make sure that data has a wr column
if (!("wr" %in% colnames(data))) {
data$wr <- bcsnowdata::wtr_yr(dates = data$date_utc)
}
# Check to make sure there is a m-d column in the data
if (!("m_d" %in% colnames(data))) {
data <- data %>%
dplyr::mutate(m_d = format.Date(date_utc, "%m-%d"))
}
if ("swe_mean" %in% colnames(data)) {
data_id <- "swe_mean" # reassign the data_ID value
}
# Filter the data by the normal span that you specify
df_time <- data %>%
dplyr::group_by(id, m_d) %>%
dplyr::rename(values_stats = all_of(data_id))
# Count the number of measurements per survey period - how many observations are present for each of the survey date?
num_obs <- df_time %>%
dplyr::filter(wr <= normal_max, wr >= normal_min) %>% # Filter by the normal dates that you specify
dplyr::filter(!is.na(values_stats)) %>%
dplyr::group_by(survey_period) %>%
dplyr::mutate(percent_available = length(values_stats) / 30 * 100) %>% # if there is 100% data, should have 30 measurements
dplyr::mutate(numberofyears_raw = length(values_stats)) %>%
dplyr::select(survey_period, percent_available, numberofyears_raw) %>%
unique()
# Append to the data as the number of raw data years
df_normal_time <- dplyr::full_join(df_time, num_obs, by = "survey_period") %>%
dplyr::filter(wr <= normal_max, wr >= normal_min) %>% # Filter by the normal dates that you specify
dplyr::select(-percent_available)
#####################################
# What survey periods have 10-20 years of data? If they exist, fill them in
survey_periods_20 <- num_obs %>%
dplyr::filter(numberofyears_raw < 20 && numberofyears_raw >= 10) %>%
dplyr::select(survey_period)
if (dim(survey_periods_20)[1] > 1) {
# Fill in data from adjacent stations using manual_datafill() function. Only fill for survey periods between 10-20 years of raw data
all_swe <- manual_datafill(data = dplyr::full_join(df_time, num_obs, by = "survey_period"),
normal_max, normal_min, survey_periods_20, num_obs)
# Group by survey data and filter so you are only calculating normals for stations with at least 20 years of raw+ predicted data
all_swe_1 <- all_swe %>%
dplyr::filter(numberofyears_estimated >= 20) %>%
dplyr::group_by(survey_period)
# Calculate normals
df_normals_filled <- manual_normal(data = all_swe_1)
# Append the survey periods that don't have enough data to calculate a normal
survey_l20 <- all_swe %>%
dplyr::ungroup() %>%
dplyr::filter(numberofyears_estimated < 20) %>%
dplyr::select(survey_period, numberofyears_estimated, numberofyears_raw, id) %>%
unique()
df_normals_10t20 <- dplyr::full_join(df_normals_filled, survey_l20, by = c("survey_period", "numberofyears_estimated", "numberofyears_raw"))
} else{
df_normals_10t20 <- data.frame(id = df_normal_time$id)
}
#####################################
# What survey periods have < 10 observations? Do not calculate a normal
survey_periods_10 <- num_obs %>%
dplyr::filter(numberofyears_raw < 10) %>%
dplyr::select(survey_period)
if (dim(survey_periods_10)[1] > 1) {
# If all of the survey periods have less than 10 years, do not calculate a normal
df_normals_10 <- df_normal_time %>%
dplyr::ungroup() %>%
dplyr::filter(survey_period %in% survey_periods_10$survey_period) %>%
dplyr::select(survey_period, numberofyears_raw, id) %>%
unique() %>%
dplyr::mutate(numberofyears_estimated = numberofyears_raw,
normal_minimum = NA,
normal_swe_mean = NA,
normal_Q5 = NA,
normal_Q10 = NA,
normal_Q25 = NA,
normal_Q50 = NA,
normal_Q75 = NA,
normal_Q90 = NA,
normal_maximum = NA,
data_range_normal = NA,
date_min_normal_utc = NA,
date_max_normal_utc = NA)
} else {
df_normals_10 <- data.frame(id = unique(df_normal_time$id))
}
#####################################
# If there is 20-30 observations for a particular survey period
survey_periods_30 <- num_obs %>%
dplyr::filter(numberofyears_raw >= 20) %>%
dplyr::select(survey_period)
if (dim(survey_periods_30)[1] >= 1) {
all_swe_1 <- df_normal_time %>%
dplyr::filter(survey_period %in% survey_periods_30$survey_period) %>%
dplyr::mutate(swe_fornormal = values_stats) %>%
dplyr::mutate(numberofyears_estimated = numberofyears_raw) %>%
dplyr::group_by(survey_period)
# Calculate the normal statistics for each day of the year with manual_normal function
df_normals_20t30 <- manual_normal(data = all_swe_1)
} else {
df_normals_20t30 <- data.frame(id = unique(df_normal_time$id))
}
# Join all together
df_10t30 <- dplyr::full_join(df_normals_20t30, df_normals_10t20) %>%
unique()
df_all <- dplyr::full_join(df_10t30, df_normals_10) %>%
unique()
df_normals_20t30
df_normals_10t20
if (dim(survey_periods_20)[1] > 1) {
# Fill in data from adjacent stations using manual_datafill() function. Only fill for survey periods between 10-20 years of raw data
all_swe <- manual_datafill(data = dplyr::full_join(df_time, num_obs, by = "survey_period"),
normal_max, normal_min, survey_periods_20, num_obs)
# Group by survey data and filter so you are only calculating normals for stations with at least 20 years of raw+ predicted data
all_swe_1 <- all_swe %>%
dplyr::filter(numberofyears_estimated >= 20) %>%
dplyr::group_by(survey_period)
# Calculate normals
df_normals_filled <- manual_normal(data = all_swe_1)
# Append the survey periods that don't have enough data to calculate a normal
survey_l20 <- all_swe %>%
dplyr::ungroup() %>%
dplyr::filter(numberofyears_estimated < 20) %>%
dplyr::select(survey_period, numberofyears_estimated, numberofyears_raw, id) %>%
unique()
df_normals_10t20 <- dplyr::full_join(df_normals_filled, survey_l20, by = c("survey_period", "numberofyears_estimated", "numberofyears_raw", "id"))
} else{
df_normals_10t20 <- data.frame(id = df_normal_time$id)
}
#####################################
# What survey periods have < 10 observations? Do not calculate a normal
survey_periods_10 <- num_obs %>%
dplyr::filter(numberofyears_raw < 10) %>%
dplyr::select(survey_period)
if (dim(survey_periods_10)[1] > 1) {
# If all of the survey periods have less than 10 years, do not calculate a normal
df_normals_10 <- df_normal_time %>%
dplyr::ungroup() %>%
dplyr::filter(survey_period %in% survey_periods_10$survey_period) %>%
dplyr::select(survey_period, numberofyears_raw, id) %>%
unique() %>%
dplyr::mutate(numberofyears_estimated = numberofyears_raw,
normal_minimum = NA,
normal_swe_mean = NA,
normal_Q5 = NA,
normal_Q10 = NA,
normal_Q25 = NA,
normal_Q50 = NA,
normal_Q75 = NA,
normal_Q90 = NA,
normal_maximum = NA,
data_range_normal = NA,
date_min_normal_utc = NA,
date_max_normal_utc = NA)
} else {
df_normals_10 <- data.frame(id = unique(df_normal_time$id))
}
#####################################
# If there is 20-30 observations for a particular survey period
survey_periods_30 <- num_obs %>%
dplyr::filter(numberofyears_raw >= 20) %>%
dplyr::select(survey_period)
if (dim(survey_periods_30)[1] >= 1) {
all_swe_1 <- df_normal_time %>%
dplyr::filter(survey_period %in% survey_periods_30$survey_period) %>%
dplyr::mutate(swe_fornormal = values_stats) %>%
dplyr::mutate(numberofyears_estimated = numberofyears_raw) %>%
dplyr::group_by(survey_period)
# Calculate the normal statistics for each day of the year with manual_normal function
df_normals_20t30 <- manual_normal(data = all_swe_1)
} else {
df_normals_20t30 <- data.frame(id = unique(df_normal_time$id))
}
# Join all together
df_10t30 <- dplyr::full_join(df_normals_20t30, df_normals_10t20) %>%
unique()
df_all <- dplyr::full_join(df_10t30, df_normals_10) %>%
unique()
View(df_all)
library(bcsnowstats)
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[1],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
time2 <- tims_start2 - Sys.time()
View(test)
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[1],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(survey_period)
View(test)
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[10],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(survey_period)
time2 <- tims_start2 - Sys.time()
View(test)
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[50],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(survey_period)
time2 <- tims_start2 - Sys.time()
View(test)
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[60],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
View(test)
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[80],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
dplyr::arrange(date_utc, survey_period)
time2 <- tims_start2 - Sys.time()
station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[80]
survey_period = "All"
get_year = "All"
normal_min = 1991
normal_max = 2020
force = FALSE
# Check to see whether the station is a manual or automated station
id_aswe <- station_id[station_id %in% bcsnowdata::snow_auto_location()$LOCATION_ID]
id_manual <- station_id[station_id %in% bcsnowdata::snow_manual_location()$LOCATION_ID]
if (length(id_aswe) > 0) {
df_aswe <- stats_aswe(station_id = id_aswe,
survey_period = survey_period,
get_year = get_year,
normal_min = normal_min,
normal_max = normal_max,
force = force)
}
length(id_manual) > 0
station_id = id_manual
# Retrieve data for the stations. Don't use caching
manual_snow <- bcsnowdata::get_manual_swe(station_id = station_id,
survey_period = "All",
get_year = "All")
# If the input is All, get the list of stations from the data you just retrieved
if (station_id[1] == "All") {
stations <- unique(manual_snow$id)
} else {
stations <- unique(station_id)
}
# convert the survey_period into the right format (in case the input format is incorrect)
if (survey_period == "01-01") {
survey_period <- "01-Jan"
} else if (survey_period == "02-01") {
survey_period <-  "01-Feb"
} else if (survey_period == "03-01") {
survey_period <-  "01-Mar"
} else if (survey_period == "04-01") {
survey_period <-  "01-Apr"
} else if (survey_period == "05-01") {
survey_period <-  "01-May"
} else if (survey_period == "05-15") {
survey_period <-  "15-May"
} else if (survey_period == "06-01") {
survey_period <-  "01-Jun"
} else if (survey_period == "06-15") {
survey_period <-  "15-Jun"
} else if (survey_period == "latest") {
survey_period <- "latest"
} else {
survey_period <- survey_period
}
incorrect_sites = NA
# Replace any missing/incorrect data; manually correct any sites that have incorrect SWE data
if (any(!is.na(incorrect_sites))) {
for (f in 1:length(incorrect_sites)) {
manual_snow$swe_mm[manual_snow$id %in% incorrect_sites[f] & manual_snow$survey_period %in% survey_period & lubridate::year(as.Date(manual_snow$date_utc)) %in% get_year] <- incorrect_data[f]
}
}
# use get_percentile function to calculate statistics for the dates and stations specified
list_stats <- lapply(stations, manual_get_stats,
data = manual_snow,
survey_period = survey_period,
get_year = get_year,
normal_min, normal_max)
# unfold the list you created
df_final_1 <- do.call(dplyr::bind_rows, list_stats)
View(df_final_1)
!isTRUE(all.equal(stations, unique(df_final_1$id))) | !is.data.frame(df_final_1)
# create an empty row for stations that did not return any data for the period specified
if (!isTRUE(all.equal(stations, unique(df_final_1$id))) | !is.data.frame(df_final_1)) {
missing <- tibble::tibble(station_id = stations[!(stations %in% unique(df_final_1$station_id))])
df_final_2 <- dplyr::bind_rows(df_final_1, missing)
} else {
df_final_2 <- df_final_1
}
library(bcsnowstats)
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[80],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
View(test)
tims_start2 <- Sys.time()
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[100],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE) %>%
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[100],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
bcsnowdata::snow_manual_location()$LOCATION_ID[100]
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[100],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
id = bcsnowdata::snow_manual_location()$LOCATION_ID[5]
save = FALSE
id
# Get the data with statistics for the manual site you are interested in
data_plot_1 <- get_snow_stats(station_id = id,
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
# Get the data with statistics for the manual site you are interested in
data_plot_1 <- get_snow_stats(station_id = id,
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
id
id = bcsnowdata::snow_manual_location()$LOCATION_ID[5]
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[5],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[5],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE
)
test <- get_snow_stats(station_id = bcsnowdata::snow_manual_location()$LOCATION_ID[5],
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
