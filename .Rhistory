type = 'scatter',
mode = 'lines+markers',
connectgaps = FALSE,
#color = ~variable,
#colors = ~point_colour,
name = "75th Percentile",
marker = list(color = colour_p()$colour_hex[7],
size = 10,
opacity = 0.8),
line = list(color = colour_p()$colour_hex[7],
width = 2,
dash = 'dashdot',
opacity = 0.9)) %>%
plotly::add_trace(data = subset(data_stats_melt, variable == "Q50"),
x = ~Date, y = ~value,
type = 'scatter',
mode = 'lines+markers',
connectgaps = FALSE,
name = "Median",
marker = list(color = "rgb(130,130,130)",
size = 10,
opacity = 0.8),
line = list(color = "rgb(130,130,130)",
width = 2,
dash = 'dashdot',
opacity = 0.9)) %>%
# current year data
plotly::add_trace(data = data_plot_current,
x = ~date_utc,
y = ~swe_mm,
type = 'scatter',
mode = 'lines+markers',
connectgaps = TRUE,
name = "Current year",
#color = ~variable,
marker = list(color = "black",
size = 10,
width = 4),
line = list(color = "black",
width = 3,
dash = 'dashdot')) %>%
# past year data
plotly::add_trace(data = data_plot_historic,
x = ~Date_art,
y = ~swe_mm,
type = 'scatter',
mode = 'lines+markers',
connectgaps = TRUE,
showlegend = TRUE, visible = "legendonly",
color = ~year_plot,
marker = list(size = 10,
width = 4),
line = list(width = 3,
dash = 'dashdot')) %>%
plotly::layout(title = paste0('Manual SWE (mm) for ', station_name, ", ", station),
margin = list(l=30, r=30, b=80, t=30, pad=0),
xaxis = list(
title = paste0(annotation()),
titlefont = list(size=8),
automargin = TRUE,
type = 'date',
#range = c(min(df.tmp.1$DATE), max(df.tmp.1$DATE)),
tickformat = "%d-%B"),
yaxis = list(title = 'SWE (mm)')) %>%
plotly::layout(annotations = list(
list(x = 0 , y = 1, text = paste0("Elevation (m): ", elevation, " | Owned by: ",  " | Year established: ", year_est, " | Basin = ", basin), showarrow = F, xref='paper', yref='paper'),
list(x = 0 , y = 0.98, text = paste0("Current % of normal (1981-2010): ", percent_normal, " | Current % of median: ", percent_median), showarrow = F, xref='paper', yref='paper'),
#list(x = 0 , y = 0.96, text = paste0("% of normal peak: ", percent_normal_peak, " | Typical % of peak accumulation for today: ", typical_percentnorm), showarrow = F, xref='paper', yref='paper'),
#list(x = 0 , y = 0.94, text = paste0("Day of peak: ", day_peak[1], " | Days until normal peak: ", days_till_peak), showarrow = F, xref='paper', yref='paper'),
list(x = 0 , y = 0.96, text = paste0("Percentile Rank: ", percentile_last, "th | Survey date of percentile: ", date_percentile), showarrow = F, xref='paper', yref='paper'),
list(x = 0 , y = 0.94, text = paste0("*Statistics smoothed by 5-day average | Updated: ", Sys.Date()), showarrow = F, xref='paper', yref='paper')))
p
p <- plotly::partial_bundle(p) # make the size smaller
# Save the plot if you have specified that it should be saved.
if (save %in% c("True", "true", "T", "TRUE", TRUE)) {
htmlwidgets::saveWidget(plotly::as_widget(p),
paste0(path, "manual_plots/", station, ".html"),
selfcontained = F,
libdir = NULL,
title = paste0("SWE ", station, " ", station_name))
}
id
plot_manual <- function(station, data_plot_1, save, path) {
df_p <- data_plot_1 %>%
dplyr::filter(id %in% station)
#Isolate only the name
station_name <- unique(df_p$snow_course_name)[!is.na(unique(df_p$snow_course_name))]
water_year <- bcsnowdata::wtr_yr(Sys.Date())
df_p <- round_df(x = df_p, digits = 0) # round all numerics within data to the nearest whole number
if (dim(df_p)[1] <= 1) { # skip the loop if there is no data for the site
print(paste0("No data returned for site ", station_name))
p <- NULL
} else {
# Get current year and stats
data_plot_current <- df_p %>%
dplyr::mutate(wr = bcsnowdata::wtr_yr(date_utc)) %>%
dplyr::filter(wr == bcsnowdata::wtr_yr(Sys.Date())) %>%
dplyr::ungroup() %>%
dplyr::select("date_utc", "swe_mm") %>%
dplyr::mutate(date_utc = as.Date(date_utc))
# =================
# Historic data
# =================
data_plot_historic <- df_p %>%
dplyr::mutate(wr = bcsnowdata::wtr_yr(date_utc)) %>%
dplyr::ungroup() %>%
dplyr::select("date_utc", "swe_mm", wr, "survey_period") %>%
dplyr::mutate(date_utc = as.Date(date_utc)) %>%
dplyr::mutate(year = lubridate::year(date_utc)) %>%
dplyr::mutate(month = lubridate::month(date_utc)) %>%
dplyr::group_by(wr) %>%
dplyr::mutate(year_art = ifelse(month >=10, water_year-1, water_year)) %>%
dplyr::mutate(Date_art = as.Date(paste0(lubridate::day(date_utc), "-", lubridate::month(date_utc), "-", year_art),
format = "%d-%m-%Y")) %>%
dplyr::select(-year_art, -month) %>%
dplyr::ungroup()  %>%
dplyr::mutate(year = as.factor(year)) %>%
dplyr::filter(wr < lubridate::year(Sys.Date())) %>%
dplyr::mutate(wr = as.factor(wr)) %>%
#dplyr::mutate(Date = format(date_utc, format = "%d-%b")) %>%
dplyr::arrange(desc(year)) %>% # attempt to re-arrrange plots so that current years are first
dplyr::mutate(year_plot = factor(wr, levels = rev(levels(wr)))) %>%
dplyr::arrange(desc(wr), desc(date_utc))
# =================
# Statistics data
# =================
data_statistics <- df_p %>%
dplyr::select(id, survey_period, normal_mm, min, swe_mean, Q5, Q10, Q25, Q50, Q75, Q90, max, data_range, numberofyears) %>%
dplyr::distinct_all() %>%
dplyr::mutate(Date = paste0(survey_period, "-", bcsnowdata::wtr_yr(Sys.Date()))) %>%
dplyr::mutate(Date = as.Date(Date, format = "%d-%b-%Y")) %>%
dplyr::ungroup()
data_stats_melt <- data_statistics %>%
dplyr::select(-data_range, -numberofyears, -normal_mm, -survey_period, -swe_mean, -Q5) %>%
reshape2::melt(id = c("Date", "id")) %>%
dplyr::mutate(point_colour = dplyr::case_when(
variable == "min" ~ colour_p()$colour_hex[2],
variable == "Q10" ~ colour_p()$colour_hex[2],
variable == "Q25" ~ colour_p()$colour_hex[3],
variable == "Q50" ~ colour_p()$colour_hex[6],
variable == "Q75" ~ colour_p()$colour_hex[7],
variable == "Q90" ~ colour_p()$colour_hex[8],
variable == "max" ~ colour_p()$colour_hex[9])) %>%
dplyr::arrange(variable, Date)
# =================
# Plot Annotations
# =================
elevation <- unique(df_p$elev_metres)[1]
# Not owned by anybody. Maintained by?
#owned_by <- subset(meta, ID == id)$OWNER
year_est <- lubridate::year(unique(min(df_p$date_utc)))
# basin # Basin
basin <- basin_name(station, basin = "All")
basin <- gsub("([[:lower:]])([[:upper:]][[:lower:]])", "\\1 \\2", as.character(basin[1,1]))
percent_normal <- data.table::last(df_p$percent_normal_mean)
percent_median <- data.table::last(df_p$percent_normal_median)
percentile_last <- df_p$percentile[dim(df_p)[1]]
date_percentile <- df_p$date_utc[dim(df_p)[1]]
# =================
# Do plot
# =================
p <- plotly::plot_ly() %>%
plotly::add_ribbons(data = data_statistics,
x = data_statistics$Date,
ymax = data_statistics$max,
ymin = data_statistics$Q90,
connectgaps = TRUE,
fillcolor = list(color = colour_p()$colour_hex[9], opacity = 0),
opacity = 0.5,
line = list(color = colour_p()$colour_hex[9], opacity = 1, width = 2),
name = 'Max - Q90') %>%
plotly::add_ribbons(data = data_statistics,
x = data_statistics$Date,
ymin = data_statistics$Q75,
ymax = data_statistics$Q90,
connectgaps = TRUE,
fillcolor = list(color = colour_p()$colour_hex[8], opacity = 0.9),
line = list(color = colour_p()$colour_hex[8], opacity = 1, width = 2),
opacity = 0.5,
name = 'Q90 - Q75') %>%
plotly::add_ribbons(data = data_statistics,
x = data_statistics$Date,
ymin = data_statistics$Q50,
ymax = data_statistics$Q75,
connectgaps = TRUE,
fillcolor = list(color = colour_p()$colour_hex[7], opacity = 0.9),
line = list(color = colour_p()$colour_hex[7], opacity = 1, width = 2),
opacity = 0.5,
name = 'Q75 - Q50') %>%
plotly::add_ribbons(data = data_statistics,
x = data_statistics$Date,
ymin = data_statistics$Q25,
ymax = data_statistics$Q50,
connectgaps = TRUE,
fillcolor = list(color = colour_p()$colour_hex[6], opacity = 0.9),
line = list(color = colour_p()$colour_hex[6], opacity = 1, width = 2),
opacity = 0.6,
name = 'Q50 - Q25') %>%
plotly::add_ribbons(data = data_statistics,
x = data_statistics$Date,
ymin = data_statistics$Q10,
ymax = data_statistics$Q25,
connectgaps = TRUE,
fillcolor = list(color = colour_p()$colour_hex[3], opacity = 0.9),
line = list(color = colour_p()$colour_hex[3], opacity = 1, width = 2),
opacity = 0.5,
name = 'Q25 - Q10') %>%
plotly::add_ribbons(data = data_statistics,
x = data_statistics$Date,
ymin = data_statistics$min,
ymax = data_statistics$Q10,
connectgaps = TRUE,
fillcolor = list(color = colour_p()$colour_hex[2], opacity = 0.9),
line = list(color = colour_p()$colour_hex[2], opacity = 1, width = 2),
opacity = 0.5,
name = 'Min - Q10') %>%
# stats
plotly::add_trace(data = subset(data_stats_melt, variable == "min"),
x = ~Date,
y = ~value,
type = 'scatter',
mode = 'lines+markers',
connectgaps = FALSE,
#color = ~variable,
#colors = ~point_colour,
name = "Minimum",
marker = list(color = colour_p()$colour_hex[2],
size = 10,
opacity = 0.8),
line = list(color = colour_p()$colour_hex[2],
width = 2,
dash = 'dashdot',
opacity = 0.9)) %>%
plotly::add_trace(data = subset(data_stats_melt, variable == "max"),
x = ~Date,
y = ~value,
type = 'scatter',
mode = 'lines+markers',
connectgaps = FALSE,
#color = ~variable,
#colors = ~point_colour,
name = "Maximum",
marker = list(color = colour_p()$colour_hex[9],
size = 10,
opacity = 0.8),
line = list(color = colour_p()$colour_hex[9],
width = 2,
dash = 'dashdot',
opacity = 0.9)) %>%
plotly::add_trace(data = subset(data_stats_melt, variable == "Q25"),
x = ~Date,
y = ~value,
type = 'scatter',
mode = 'lines+markers',
connectgaps = FALSE,
#color = ~variable,
#colors = ~point_colour,
name = "25th Percentile",
marker = list(color = colour_p()$colour_hex[6],
size = 10,
opacity = 0.8),
line = list(color = colour_p()$colour_hex[6],
width = 2,
dash = 'dashdot',
opacity = 0.9)) %>%
plotly::add_trace(data = subset(data_stats_melt, variable == "Q75"),
x = ~Date,
y = ~value,
type = 'scatter',
mode = 'lines+markers',
connectgaps = FALSE,
#color = ~variable,
#colors = ~point_colour,
name = "75th Percentile",
marker = list(color = colour_p()$colour_hex[7],
size = 10,
opacity = 0.8),
line = list(color = colour_p()$colour_hex[7],
width = 2,
dash = 'dashdot',
opacity = 0.9)) %>%
plotly::add_trace(data = subset(data_stats_melt, variable == "Q50"),
x = ~Date, y = ~value,
type = 'scatter',
mode = 'lines+markers',
connectgaps = FALSE,
name = "Median",
marker = list(color = "rgb(130,130,130)",
size = 10,
opacity = 0.8),
line = list(color = "rgb(130,130,130)",
width = 2,
dash = 'dashdot',
opacity = 0.9)) %>%
# current year data
plotly::add_trace(data = data_plot_current,
x = ~date_utc,
y = ~swe_mm,
type = 'scatter',
mode = 'lines+markers',
connectgaps = TRUE,
name = "Current year",
#color = ~variable,
marker = list(color = "black",
size = 10,
width = 4),
line = list(color = "black",
width = 3,
dash = 'dashdot')) %>%
# past year data
plotly::add_trace(data = data_plot_historic,
x = ~Date_art,
y = ~swe_mm,
type = 'scatter',
mode = 'lines+markers',
connectgaps = TRUE,
showlegend = TRUE, visible = "legendonly",
color = ~year_plot,
marker = list(size = 10,
width = 4),
line = list(width = 3,
dash = 'dashdot')) %>%
plotly::layout(title = paste0('Manual SWE (mm) for ', station_name, ", ", station),
margin = list(l=30, r=30, b=80, t=30, pad=0),
xaxis = list(
title = paste0(annotation()),
titlefont = list(size=8),
automargin = TRUE,
type = 'date',
#range = c(min(df.tmp.1$DATE), max(df.tmp.1$DATE)),
tickformat = "%d-%B"),
yaxis = list(title = 'SWE (mm)')) %>%
plotly::layout(annotations = list(
list(x = 0 , y = 1, text = paste0("Elevation (m): ", elevation, " | Owned by: ",  " | Year established: ", year_est, " | Basin = ", basin), showarrow = F, xref='paper', yref='paper'),
list(x = 0 , y = 0.98, text = paste0("Current % of normal (1981-2010): ", percent_normal, " | Current % of median: ", percent_median), showarrow = F, xref='paper', yref='paper'),
#list(x = 0 , y = 0.96, text = paste0("% of normal peak: ", percent_normal_peak, " | Typical % of peak accumulation for today: ", typical_percentnorm), showarrow = F, xref='paper', yref='paper'),
#list(x = 0 , y = 0.94, text = paste0("Day of peak: ", day_peak[1], " | Days until normal peak: ", days_till_peak), showarrow = F, xref='paper', yref='paper'),
list(x = 0 , y = 0.96, text = paste0("Percentile Rank: ", percentile_last, "th | Survey date of percentile: ", date_percentile), showarrow = F, xref='paper', yref='paper'),
list(x = 0 , y = 0.94, text = paste0("*Statistics smoothed by 5-day average | Updated: ", Sys.Date()), showarrow = F, xref='paper', yref='paper')))
p <- plotly::partial_bundle(p) # make the size smaller
# Save the plot if you have specified that it should be saved.
if (save %in% c("True", "true", "T", "TRUE", TRUE)) {
htmlwidgets::saveWidget(plotly::as_widget(p),
paste0(path, "manual_plots/", station, ".html"),
selfcontained = F,
libdir = NULL,
title = paste0("SWE ", station, " ", station_name))
}
}
}
id
# Plot with function
p <- do.call(rbind, lapply(id, plot_manual, data_plot_1, save, path))
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
active_m <- bcsnowdata::snow_manual_location() %>%
dplyr::filter(STATUS == "Active")
plot_manual <- plot_interactive_manual(id = active_m$LOCATION_ID[10:20],
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/manual/"))
plot_manual <- plot_interactive_manual(id = active_m$LOCATION_ID,
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/manual/"))
rm(list = ls())
library(bcsnowdata)
library(bcsnowstats)
library(dplyr)
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
id_test = bcsnowdata::snow_auto_location()$LOCATION_ID[10]
tims_start <- Sys.time()
test <- get_snow_stats(station_id = ASWE_sites_active[1],
survey_period = "All",
get_year = "2022",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
View(test)
# Test for interactive plots
# V drive for saving
drive = "\\\\DRAIN.dmz\\Shared"
drive_G = "\\\\Backhoe\\s63101\\Watershare\\rfc"
drive_Q = "\\\\question.bcgov\\envwwwt\\rfc"
drive_R = "\\\\answer.bcgov\\envwww\\rfc"
ASWE_sites <- bcsnowdata::snow_auto_location() %>%
dplyr::filter(STATUS == "Active")
ASWE_sites_active <- ASWE_sites$LOCATION_ID
tims_start2 <- Sys.time()
plot_test <- plot_interactive_aswe(id = ASWE_sites_active[1],
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/"))
time_save <- tims_start2 - Sys.time()
tims_start2 <- Sys.time()
plot_test <- plot_interactive_aswe(id = ASWE_sites_active,
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/"))
time_save <- tims_start2 - Sys.time()
ASWE_sites_active
tims_start2 <- Sys.time()
plot_test <- plot_interactive_aswe(id = ASWE_sites_active[1:5],
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/"))
time_save <- tims_start2 - Sys.time()
tims_start2 <- Sys.time()
plot_test <- plot_interactive_aswe(id = ASWE_sites_active[1:2],
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/"))
time_save <- tims_start2 - Sys.time()
id = ASWE_sites_active[1:2]
save = TRUE
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/Interactive_plots/")
# Get statistics data for the site you are plotting
data_plot_1 <- get_swe(id)
id
# Get statistics data for the site you are plotting
data_plot_1 <- get_snow_stats(station_id = id,
survey_period = "All",
get_year = "All",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
tims_start <- Sys.time()
test <- get_snow_stats(station_id = ASWE_sites_active[1:10],
survey_period = "All",
get_year = "2022",
normal_min = 1991,
normal_max = 2020,
force = FALSE)
time_5 <- tims_start - Sys.time()
ASWE_sites_active[1:10]
survey_period = "All"
get_year = "2022"
normal_min = 1991
normal_max = 2020
force = FALSE
aswe <- bcsnowdata::snow_auto_location()$LOCATION_ID
man <- bcsnowdata::snow_manual_location()$LOCATION_ID
if (any(station_id %in% c("aswe", "ASWE", "Aswe"))) {
id_aswe <- aswe
} else if (any(station_id %in% c("manual", "MANUAL", "Manual", "man"))) {
id_manual <- man
} else if (any(station_id %in% c("ALL", "all", "All"))) {
id_aswe <- aswe
id_manual <- man
} else {
# Check to see whether the station is a manual or automated station
id_aswe <- station_id[station_id %in% aswe]
id_manual <- station_id[station_id %in% man]
}
station_id
station_id = ASWE_sites_active[1:10]
station_id
aswe <- bcsnowdata::snow_auto_location()$LOCATION_ID
man <- bcsnowdata::snow_manual_location()$LOCATION_ID
if (any(station_id %in% c("aswe", "ASWE", "Aswe"))) {
id_aswe <- aswe
} else if (any(station_id %in% c("manual", "MANUAL", "Manual", "man"))) {
id_manual <- man
} else if (any(station_id %in% c("ALL", "all", "All"))) {
id_aswe <- aswe
id_manual <- man
} else {
# Check to see whether the station is a manual or automated station
id_aswe <- station_id[station_id %in% aswe]
id_manual <- station_id[station_id %in% man]
}
length(id_aswe) > 0
station_id
# Current water year from the system time
current_wy <- bcsnowdata::wtr_yr(Sys.time())
# If the input is All, get the station list from the website for current sites
if (any(station_id[1] %in% c("All", "all", "ALL")) || any(station_id[1] %in% c("aswe", "ASWE", "Aswe"))) {
station_list <- unique(bcsnowdata::snow_auto_location()$LOCATION_ID)
} else {
station_list <- unique(station_id)
}
# convert the survey_period into the right format (in case the input format is incorrect)
if (survey_period == "01-Jan"){
survey_period <- "01-01"
} else if (survey_period == "01-Feb"){
survey_period <-  "02-01"
} else if (survey_period == "01-Mar"){
survey_period <-  "03-01"
} else if (survey_period == "01-Apr"){
survey_period <-  "04-01"
} else if (survey_period == "01-May"){
survey_period <-  "05-01"
} else if (survey_period == "15-May"){
survey_period <-  "05-15"
} else if (survey_period == "01-Jun"){
survey_period <-  "06-01"
} else if (survey_period == "15-Jun"){
survey_period <-  "06-15"
} else if (survey_period == "latest"){
survey_period <- "latest"
} else {
survey_period <- survey_period
}
print("get data")
# Get data for the station in order to calculate statistics
df <- bcsnowdata::get_aswe_databc(station_id = station_list,
get_year = "All",
parameter = "swe",
timestep = "daily"
)
