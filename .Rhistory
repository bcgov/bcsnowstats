#add_bars(data = subset(delta_precip, plus_neg == 'red'), x = ~date_utc, y = ~deltaprecip_daily_mm, type = 'bar', marker = list(color = "red"),
#          name = 'Loss') %>%
plotly::layout(title = paste0('Increase in Daily Precipitation for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Increase in Daily Precipitation (mm) <br> <i>*Only increases in precip shown</i>'))
precip_p
station_name
station_name <- bcsnowdata::snow_auto_location()$LOCATION_NAME[snow_auto_location()$LOCATION_ID %in% as.character(id)]
# -------------------------
## Plot the temp
# -------------------------
# get the temp for the station
temp_raw <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = bcsnowdata::wtr_yr(Sys.Date()),
parameter = "temperature",
timestep = "daily")
temp <- temp_raw %>%
dplyr::mutate(Date = as.Date(date_utc)) %>%
dplyr::group_by(Date) %>%
dplyr::mutate(Daily_max = max(value, na.rm = TRUE)) %>%
dplyr::mutate(Daily_min = min(value, na.rm = TRUE)) %>%
dplyr::select(Date, Daily_max, Daily_min) %>%
dplyr::distinct(Date, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
dplyr::mutate(Date = as.Date(Date)) # ensure the date is in the right format
temp_p <- temp %>%
plotly::plot_ly() %>%
plotly::add_trace(x = ~Date, y = ~Daily_max, name= "Daily Max Temp", type = 'scatter', mode = 'lines', connectgaps = FALSE) %>%
plotly::add_trace(x = ~Date, y = ~Daily_min, type = 'scatter', type = 'scatter', mode = 'lines',
line = list(color = "grey"), name= "Daily Min Temp", connectgaps = FALSE) %>%
plotly::layout(title = paste0('Daily Temp (degree C) for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Daily Temp (degree C)'))
temp_p
temp_p <- temp %>%
plotly::plot_ly() %>%
plotly::add_trace(x = ~Date, y = ~Daily_max, name= "Daily Max Temp", type = 'scatter', mode = 'lines', connectgaps = FALSE) %>%
plotly::add_trace(x = ~Date, y = ~Daily_min, type = 'scatter', type = 'scatter', mode = 'lines',
line = list(color = "grey"), name= "Daily Min Temp", connectgaps = FALSE) %>%
plotly::layout(title = paste0('Daily Temp (degree C) for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Daily Temp (degree C)'))
# -------------------------
## Plot the precip for the site
# -------------------------
precip <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = bcsnowdata::wtr_yr(Sys.Date()),
parameter = "precipitation",
timestep = "daily") %>%
dplyr::distinct(date_utc, .keep_all = TRUE)
# calculate the difference in precipitation between days
precip_diff <- diff(precip$value)
if (length(precip_diff) > 0) {
delta_precip <-  data.frame(R.utils::insert(precip_diff, 1, NA)) %>% # insert leading NA
dplyr::mutate(date_utc = precip$date_utc) %>%
dplyr::rename(deltaprecip_daily_mm = "R.utils..insert.precip_diff..1..NA.") %>%
dplyr::mutate(plus_neg = ifelse(deltaprecip_daily_mm >= 0, "green", "red"))
} else {
delta_precip <- data.frame(date_utc = NA, deltaprecip_daily_mm = NA, plus_neg = NA)
}
precip_p <- delta_precip %>%
plotly::plot_ly() %>%
# add_trace(x = ~date_utc, y = ~value, name= "Accumulated Precip", type = 'scatter', mode = 'markers') %>%
plotly::add_bars(data = subset(delta_precip, plus_neg == 'green'), x = ~date_utc, y = ~deltaprecip_daily_mm, type = 'bar', marker = list(color = "green"),
name = "Change in Daily Accumulated Precip") %>%
#add_bars(data = subset(delta_precip, plus_neg == 'red'), x = ~date_utc, y = ~deltaprecip_daily_mm, type = 'bar', marker = list(color = "red"),
#          name = 'Loss') %>%
plotly::layout(title = paste0('Increase in Daily Precipitation for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Increase in Daily Precipitation (mm) <br> <i>*Only increases in precip shown</i>'))
# -------------------------
## Plot the delta SWE
# -------------------------
# Get statistics data for the site you are plotting
data_plot_1 <- get_swe(id)
dim(data_plot_1)[1] > 1
# isolate current year data with statistics
d_all_curr <- getSWE_current(data = data_plot_1)
# Calculate the delta SWE from the current year - d_all_curr
delta_SWE <-  diff(d_all_curr$value)
delta_SWE_full <-  data.frame(R.utils::insert(delta_SWE, 1, NA)) %>% # insert leading NA
dplyr::mutate(date_utc = d_all_curr$date_utc) %>%
dplyr::rename(deltaSWE_daily_mm = "R.utils..insert.delta_SWE..1..NA.") %>%
dplyr::mutate(plus_neg = ifelse(deltaSWE_daily_mm >= 0, "blue", "red"))
delta_all <- dplyr::full_join(d_all_curr, delta_SWE_full, by = "date_utc")
# Plot barchart of the delta SWE
delta_p <- plotly::plot_ly() %>%
plotly::add_bars(data = subset(delta_all, plus_neg == 'blue'), x = ~date_utc, y = ~deltaSWE_daily_mm, type = 'bar', marker = list(color = "blue"),
name = "Accumulation") %>%
plotly::add_bars(data = subset(delta_all, plus_neg == 'red'), x = ~date_utc, y = ~deltaSWE_daily_mm, type = 'bar', marker = list(color = "red"),
name = 'Loss') %>%
plotly::layout(title = paste0('Change in Daily SWE (mm) for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Change in Daily SWE (mm)'))
delta_p
station_name <- bcsnowdata::snow_auto_location()$LOCATION_NAME[snow_auto_location()$LOCATION_ID %in% as.character(id)]
# -------------------------
## Plot the temp
# -------------------------
# get the temp for the station
temp_raw <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = bcsnowdata::wtr_yr(Sys.Date()),
parameter = "temperature",
timestep = "daily")
temp <- temp_raw %>%
dplyr::mutate(Date = as.Date(date_utc)) %>%
dplyr::group_by(Date) %>%
dplyr::mutate(Daily_max = max(value, na.rm = TRUE)) %>%
dplyr::mutate(Daily_min = min(value, na.rm = TRUE)) %>%
dplyr::select(Date, Daily_max, Daily_min) %>%
dplyr::distinct(Date, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
dplyr::mutate(Date = as.Date(Date)) # ensure the date is in the right format
temp_p <- temp %>%
plotly::plot_ly() %>%
plotly::add_trace(x = ~Date, y = ~Daily_max, name= "Daily Max Temp", type = 'scatter', mode = 'lines', connectgaps = FALSE) %>%
plotly::add_trace(x = ~Date, y = ~Daily_min, type = 'scatter', type = 'scatter', mode = 'lines',
line = list(color = "grey"), name= "Daily Min Temp", connectgaps = FALSE) %>%
plotly::layout(title = paste0('Daily Temp (degree C) for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Daily Temp (degree C)'))
# -------------------------
## Plot the precip for the site
# -------------------------
precip <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = bcsnowdata::wtr_yr(Sys.Date()),
parameter = "precipitation",
timestep = "daily") %>%
dplyr::distinct(date_utc, .keep_all = TRUE)
# calculate the difference in precipitation between days
precip_diff <- diff(precip$value)
if (length(precip_diff) > 0) {
delta_precip <-  data.frame(R.utils::insert(precip_diff, 1, NA)) %>% # insert leading NA
dplyr::mutate(date_utc = precip$date_utc) %>%
dplyr::rename(deltaprecip_daily_mm = "R.utils..insert.precip_diff..1..NA.") %>%
dplyr::mutate(plus_neg = ifelse(deltaprecip_daily_mm >= 0, "green", "red"))
} else {
delta_precip <- data.frame(date_utc = NA, deltaprecip_daily_mm = NA, plus_neg = NA)
}
precip_p <- delta_precip %>%
plotly::plot_ly() %>%
# add_trace(x = ~date_utc, y = ~value, name= "Accumulated Precip", type = 'scatter', mode = 'markers') %>%
plotly::add_bars(data = subset(delta_precip, plus_neg == 'green'), x = ~date_utc, y = ~deltaprecip_daily_mm, type = 'bar', marker = list(color = "green"),
name = "Change in Daily Accumulated Precip") %>%
#add_bars(data = subset(delta_precip, plus_neg == 'red'), x = ~date_utc, y = ~deltaprecip_daily_mm, type = 'bar', marker = list(color = "red"),
#          name = 'Loss') %>%
plotly::layout(title = paste0('Increase in Daily Precipitation for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Increase in Daily Precipitation (mm) <br> <i>*Only increases in precip shown</i>'))
# -------------------------
## Plot the delta SWE
# -------------------------
# Get statistics data for the site you are plotting
data_plot_1 <- get_swe(id)
# IF there is data, plot it. If not, assign the data as NA
if (dim(data_plot_1)[1] > 1){
# isolate current year data with statistics
d_all_curr <- getSWE_current(data = data_plot_1)
# Calculate the delta SWE from the current year - d_all_curr
delta_SWE <-  diff(d_all_curr$value)
delta_SWE_full <-  data.frame(R.utils::insert(delta_SWE, 1, NA)) %>% # insert leading NA
dplyr::mutate(date_utc = d_all_curr$date_utc) %>%
dplyr::rename(deltaSWE_daily_mm = "R.utils..insert.delta_SWE..1..NA.") %>%
dplyr::mutate(plus_neg = ifelse(deltaSWE_daily_mm >= 0, "blue", "red"))
delta_all <- dplyr::full_join(d_all_curr, delta_SWE_full, by = "date_utc")
# Plot barchart of the delta SWE
delta_p <- plotly::plot_ly() %>%
plotly::add_bars(data = subset(delta_all, plus_neg == 'blue'), x = ~date_utc, y = ~deltaSWE_daily_mm, type = 'bar', marker = list(color = "blue"),
name = "Accumulation") %>%
plotly::add_bars(data = subset(delta_all, plus_neg == 'red'), x = ~date_utc, y = ~deltaSWE_daily_mm, type = 'bar', marker = list(color = "red"),
name = 'Loss') %>%
plotly::layout(title = paste0('Change in Daily SWE (mm) for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Change in Daily SWE (mm)'))
} else {
delta_p <- plotly::plot_ly() # Assign an empty plot
}
## Save the precip, temp and delta SWE as one plot
all_p <-  plotly::subplot(temp_p, precip_p, delta_p, nrows = 3, margin = 0.04, heights = c(0.3, 0.3, 0.4), shareX = TRUE, titleY = TRUE)
all_p
save %in% c("True", "true", "T", "TRUE", TRUE)
# ================
#' Function for plotting climate data from ASWE sites
#' Plot the temp, precip and delta SWE as a separate plot
#' @param path path that you want to save plots in
#' @param id station ID that you want to plot SWE for
#' @param save whether to save the plot and stats. Defaults to 'No'
#' @importFrom magrittr %>%
#' @export
#' @keywords plot climate aswe
#' @examples \dontrun{}
plot_climate_aswe <- function(path, id, save = "No") {
station_name <- bcsnowdata::snow_auto_location()$LOCATION_NAME[snow_auto_location()$LOCATION_ID %in% as.character(id)]
# -------------------------
## Plot the temp
# -------------------------
# get the temp for the station
temp_raw <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = bcsnowdata::wtr_yr(Sys.Date()),
parameter = "temperature",
timestep = "daily")
temp <- temp_raw %>%
dplyr::mutate(Date = as.Date(date_utc)) %>%
dplyr::group_by(Date) %>%
dplyr::mutate(Daily_max = max(value, na.rm = TRUE)) %>%
dplyr::mutate(Daily_min = min(value, na.rm = TRUE)) %>%
dplyr::select(Date, Daily_max, Daily_min) %>%
dplyr::distinct(Date, .keep_all = TRUE) %>%
dplyr::ungroup() %>%
dplyr::mutate(Date = as.Date(Date)) # ensure the date is in the right format
temp_p <- temp %>%
plotly::plot_ly() %>%
plotly::add_trace(x = ~Date, y = ~Daily_max, name= "Daily Max Temp", type = 'scatter', mode = 'lines', connectgaps = FALSE) %>%
plotly::add_trace(x = ~Date, y = ~Daily_min, type = 'scatter', type = 'scatter', mode = 'lines',
line = list(color = "grey"), name= "Daily Min Temp", connectgaps = FALSE) %>%
plotly::layout(title = paste0('Daily Temp (degree C) for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Daily Temp (degree C)'))
# -------------------------
## Plot the precip for the site
# -------------------------
precip <- bcsnowdata::get_aswe_databc(station_id = id,
get_year = bcsnowdata::wtr_yr(Sys.Date()),
parameter = "precipitation",
timestep = "daily") %>%
dplyr::distinct(date_utc, .keep_all = TRUE)
# calculate the difference in precipitation between days
precip_diff <- diff(precip$value)
if (length(precip_diff) > 0) {
delta_precip <-  data.frame(R.utils::insert(precip_diff, 1, NA)) %>% # insert leading NA
dplyr::mutate(date_utc = precip$date_utc) %>%
dplyr::rename(deltaprecip_daily_mm = "R.utils..insert.precip_diff..1..NA.") %>%
dplyr::mutate(plus_neg = ifelse(deltaprecip_daily_mm >= 0, "green", "red"))
} else {
delta_precip <- data.frame(date_utc = NA, deltaprecip_daily_mm = NA, plus_neg = NA)
}
precip_p <- delta_precip %>%
plotly::plot_ly() %>%
# add_trace(x = ~date_utc, y = ~value, name= "Accumulated Precip", type = 'scatter', mode = 'markers') %>%
plotly::add_bars(data = subset(delta_precip, plus_neg == 'green'), x = ~date_utc, y = ~deltaprecip_daily_mm, type = 'bar', marker = list(color = "green"),
name = "Change in Daily Accumulated Precip") %>%
#add_bars(data = subset(delta_precip, plus_neg == 'red'), x = ~date_utc, y = ~deltaprecip_daily_mm, type = 'bar', marker = list(color = "red"),
#          name = 'Loss') %>%
plotly::layout(title = paste0('Increase in Daily Precipitation for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Increase in Daily Precipitation (mm) <br> <i>*Only increases in precip shown</i>'))
# -------------------------
## Plot the delta SWE
# -------------------------
# Get statistics data for the site you are plotting
data_plot_1 <- get_swe(id)
# IF there is data, plot it. If not, assign the data as NA
if (dim(data_plot_1)[1] > 1){
# isolate current year data with statistics
d_all_curr <- getSWE_current(data = data_plot_1)
# Calculate the delta SWE from the current year - d_all_curr
delta_SWE <-  diff(d_all_curr$value)
delta_SWE_full <-  data.frame(R.utils::insert(delta_SWE, 1, NA)) %>% # insert leading NA
dplyr::mutate(date_utc = d_all_curr$date_utc) %>%
dplyr::rename(deltaSWE_daily_mm = "R.utils..insert.delta_SWE..1..NA.") %>%
dplyr::mutate(plus_neg = ifelse(deltaSWE_daily_mm >= 0, "blue", "red"))
delta_all <- dplyr::full_join(d_all_curr, delta_SWE_full, by = "date_utc")
# Plot barchart of the delta SWE
delta_p <- plotly::plot_ly() %>%
plotly::add_bars(data = subset(delta_all, plus_neg == 'blue'), x = ~date_utc, y = ~deltaSWE_daily_mm, type = 'bar', marker = list(color = "blue"),
name = "Accumulation") %>%
plotly::add_bars(data = subset(delta_all, plus_neg == 'red'), x = ~date_utc, y = ~deltaSWE_daily_mm, type = 'bar', marker = list(color = "red"),
name = 'Loss') %>%
plotly::layout(title = paste0('Change in Daily SWE (mm) for ', station_name, ", ", id),
xaxis = list(
title = 'Date',
type = 'date',
tickformat = "%d-%B"),
yaxis = list(title = 'Change in Daily SWE (mm)'))
} else {
delta_p <- plotly::plot_ly() # Assign an empty plot
}
## Save the precip, temp and delta SWE as one plot
all_p <-  plotly::subplot(temp_p, precip_p, delta_p, nrows = 3, margin = 0.04, heights = c(0.3, 0.3, 0.4), shareX = TRUE, titleY = TRUE)
if (save %in% c("True", "true", "T", "TRUE", TRUE)) {
htmlwidgets::saveWidget(plotly::as_widget(all_p),
paste0(path, "delta_", id, ".html"),
selfcontained = F,
libdir = NULL,
title = paste0("SWE_Change ", id))
}
return(list("climate_plot" = all_p))
}
plot_climate <- plot_climate_aswe(id = "1C29P",
save = TRUE,
path = paste0(drive_Q, "/Real-time_Data/ASP_daily_interactive/ASWE/delta_plots/"))
plot_climate
station_id = c("1A04")
survey_period = "All"
get_year = "All"
normal_min = 1991
normal_max = 2020
force = FALSE
# Check to see whether the station is a manual or automated station
id_aswe <- station_id[station_id %in% bcsnowdata::snow_auto_location()$LOCATION_ID]
id_manual <- station_id[station_id %in% bcsnowdata::snow_manual_location()$LOCATION_ID]
id_manual
if (length(id_aswe) > 0) {
df_aswe <- stats_aswe(station_id = id_aswe,
survey_period = survey_period,
get_year = get_year,
normal_min = normal_min,
normal_max = normal_max,
force = force)
}
length(id_manual) > 0
id_manual
# Manual data
if (length(id_manual) > 0) {
df_manual <- stats_MSWE(station_id = id_manual,
survey_period = survey_period,
get_year = get_year,
normal_min = normal_min,
normal_max = normal_max)
}
station_id = id_manual
survey_period
get_year
normal_min
normal_max
#Retrieve data for the stations. Don't use caching
manual_snow <- bcsnowdata::get_manual_swe(station_id = station_id,
survey_period = "All",
get_year = "All")
# If the input is All, get the list of stations from the data you just retrieved
if (station_id[1] == "All") {
stations <- unique(manual_snow$station_id)
} else {
stations <- unique(station_id)
}
manual_snow$station_id
View(manual_snow)
# If the input is All, get the list of stations from the data you just retrieved
if (station_id[1] == "All") {
stations <- unique(manual_snow$station_id)
} else {
stations <- unique(station_id)
}
# convert the survey_period into the right format (in case the input format is incorrect)
if (survey_period == "01-01") {
survey_period <- "01-Jan"
} else if (survey_period == "02-01") {
survey_period <-  "01-Feb"
} else if (survey_period == "03-01") {
survey_period <-  "01-Mar"
} else if (survey_period == "04-01") {
survey_period <-  "01-Apr"
} else if (survey_period == "05-01") {
survey_period <-  "01-May"
} else if (survey_period == "05-15") {
survey_period <-  "15-May"
} else if (survey_period == "06-01") {
survey_period <-  "01-Jun"
} else if (survey_period == "06-15") {
survey_period <-  "15-Jun"
} else if (survey_period == "latest") {
survey_period <- "latest"
} else {
survey_period <- survey_period
}
# Replace any missing/incorrect data; manually correct any sites that have incorrect SWE data
if (any(!is.na(incorrect_sites))) {
for (f in 1:length(incorrect_sites)) {
manual_snow$swe_mm[manual_snow$station_id %in% incorrect_sites[f] & manual_snow$survey_period %in% survey_period & lubridate::year(as.Date(manual_snow$date_utc)) %in% get_year] <- incorrect_data[f]
}
}
incorrect_sites = NA
incorrect_data = NA
# convert the survey_period into the right format (in case the input format is incorrect)
if (survey_period == "01-01") {
survey_period <- "01-Jan"
} else if (survey_period == "02-01") {
survey_period <-  "01-Feb"
} else if (survey_period == "03-01") {
survey_period <-  "01-Mar"
} else if (survey_period == "04-01") {
survey_period <-  "01-Apr"
} else if (survey_period == "05-01") {
survey_period <-  "01-May"
} else if (survey_period == "05-15") {
survey_period <-  "15-May"
} else if (survey_period == "06-01") {
survey_period <-  "01-Jun"
} else if (survey_period == "06-15") {
survey_period <-  "15-Jun"
} else if (survey_period == "latest") {
survey_period <- "latest"
} else {
survey_period <- survey_period
}
# Replace any missing/incorrect data; manually correct any sites that have incorrect SWE data
if (any(!is.na(incorrect_sites))) {
for (f in 1:length(incorrect_sites)) {
manual_snow$swe_mm[manual_snow$station_id %in% incorrect_sites[f] & manual_snow$survey_period %in% survey_period & lubridate::year(as.Date(manual_snow$date_utc)) %in% get_year] <- incorrect_data[f]
}
}
stations
data = manual_snow
stations
# Filter the entire manual dataset by the stations you are looking for
df_tmp <- data %>%
dplyr::filter(station_id %in% stations)
df_tmp$wr <- bcsnowdata::wtr_yr(dates = df_tmp$date_utc)
df_tmp_1 <- df_tmp %>%
dplyr::group_by(survey_period, station_id) %>%
dplyr::filter(!is.na(swe_mm)) # filter out missing data
# Calculate statistics and normals through function for each survey period
df_stat <- snow_stats_manual(data = df_tmp_1, normal_min, normal_max)
data = df_tmp_1
data
normal_min
normal_max
# compute historical stats - for each day of the year
# get historic dataset - previous to this year
df_hist <- data %>%
dplyr::filter(wr < bcsnowdata::wtr_yr(Sys.Date())) %>% # get only 16:00 daily measurement.
dplyr::mutate(m_d = format.Date(date_utc, "%m-%d"))  %>%
dplyr::filter(!is.na(swe_mm)) %>% # filter out missing data
dplyr::mutate(swe_mm = as.numeric(as.character(swe_mm))) %>%
dplyr::group_by(station_id, survey_period)
# compute historical stats - by survey period
df_stat <- do.call(data.frame,
list(dplyr::summarise(df_hist, min = min(swe_mm, na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, swe_mean = mean(swe_mm, na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, Q5 = quantile(swe_mm, 0.05, na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, Q10 = quantile(swe_mm, 0.1, na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, Q25 = quantile(swe_mm, 0.25, na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, Q50 = quantile(swe_mm, 0.5,na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, Q75 = quantile(swe_mm,0.75, na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, Q90 = quantile(swe_mm,0.90, na.rm = TRUE), .groups = "keep"),
dplyr::summarise(df_hist, max = max(swe_mm, na.rm = TRUE), .groups = "keep"))) %>%
dplyr::select(-survey_period.1, -survey_period.2, -survey_period.3, -survey_period.4, -survey_period.5, -survey_period.6, -survey_period.7, -survey_period.8) %>%
dplyr::select(-station_id.1, -station_id.2, -station_id.3, -station_id.4, -station_id.5, -station_id.6, -station_id.7, -station_id.8)
df_time <- data %>%
dplyr::ungroup() %>%
dplyr::group_by(station_id) %>%
dplyr::summarize(maxdate = max(date_utc), mindate = min(date_utc), .groups = "keep") %>%
dplyr::mutate(data_range = (paste0(mindate, " to ", maxdate))) %>%
dplyr::mutate(numberofyears = lubridate::year(maxdate) - lubridate::year(mindate)) %>%
dplyr::select(station_id, data_range, numberofyears)
df_stat_date <- dplyr::full_join(df_stat, df_time, by = c("station_id"))
# get the day of the max and min!!
min_date <- df_hist %>%
dplyr::group_by(station_id, survey_period) %>%
dplyr::slice(which.min(swe_mm)) %>%
dplyr::select(date_utc, station_id, survey_period) %>%
dplyr::rename(date_min_utc = date_utc)
max_date <- df_hist %>%
dplyr::group_by(station_id, survey_period) %>%
dplyr::slice(which.max(swe_mm)) %>%
dplyr::select(date_utc, station_id, survey_period) %>%
dplyr::rename(date_max_utc = date_utc)
# append to data
dates <- dplyr::full_join(min_date, max_date, by = c("survey_period", "station_id"))
df_stat_1 <- dplyr::full_join(df_stat_date, dates, by = c("survey_period", "station_id"))
# Calculate the snow normals - 1981 to 2010 (water year)
df_normals_1 <- SWE_normals(data, normal_max, normal_min)
data
all(data %in% bcsnowdata::snow_auto_location()$LOCATION_ID)
all(data %in% bcsnowdata::snow_manual_location()$LOCATION_ID)
# if the user input data as a station name (i.e., the function is being used as a stand alone function), get the data for the station
if (all(data %in% bcsnowdata::snow_auto_location()$LOCATION_ID)) {
data_norm <- bcsnowdata::get_aswe_databc(
station_id = data,
get_year = "All",
parameter = "swe",
timestep = "daily"
)
} else if (all(data %in% bcsnowdata::snow_manual_location()$LOCATION_ID)) {
data_norm <- bcsnowdata::get_manual_swe(
id = data,
get_year = "All",
survey_period = "All")
} else {
data_norm <- data
}
id <- unique(data_norm$id)
